
AVRASM ver. 2.1.30  E:\uni\term7\MicroP\HW6\base\04 ADC\Software\List\program.asm Wed Jan 26 14:55:57 2022

E:\uni\term7\MicroP\HW6\base\04 ADC\Software\List\program.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\uni\term7\MicroP\HW6\base\04 ADC\Software\List\program.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\uni\term7\MicroP\HW6\base\04 ADC\Software\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0043 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 4d4c
00002b 3533
00002c 5320
00002d 6e65      	.DB  0x4C,0x4D,0x33,0x35,0x20,0x53,0x65,0x6E
00002e 6f73
00002f 0072
000030 6554
000031 706d      	.DB  0x73,0x6F,0x72,0x0,0x54,0x65,0x6D,0x70
000032 3a20
000033 4300
E:\uni\term7\MicroP\HW6\base\04 ADC\Software\List\program.asm(1124): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x20,0x3A,0x0,0x43,0x0
                 _0x2000003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 000c      	.DW  0x0C
000037 0260      	.DW  _0x6
000038 0054      	.DW  _0x0*2
                 
000039 0007      	.DW  0x07
00003a 026c      	.DW  _0x6+12
00003b 0060      	.DW  _0x0*2+12
                 
00003c 0002      	.DW  0x02
00003d 0273      	.DW  _0x6+19
00003e 0067      	.DW  _0x0*2+19
                 
00003f 0002      	.DW  0x02
000040 0275      	.DW  __base_y_G100
000041 006a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000042 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000043 94f8      	CLI
000044 27ee      	CLR  R30
000045 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000046 e0f1      	LDI  R31,1
000047 bffb      	OUT  GICR,R31
000048 bfeb      	OUT  GICR,R30
000049 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004a e1f8      	LDI  R31,0x18
00004b bdf1      	OUT  WDTCR,R31
00004c bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00004d e08d      	LDI  R24,(14-2)+1
00004e e0a2      	LDI  R26,2
00004f 27bb      	CLR  R27
                 __CLEAR_REG:
000050 93ed      	ST   X+,R30
000051 958a      	DEC  R24
000052 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000053 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000054 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000055 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000056 93ed      	ST   X+,R30
000057 9701      	SBIW R24,1
000058 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000059 e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005b 9185      	LPM  R24,Z+
00005c 9195      	LPM  R25,Z+
00005d 9700      	SBIW R24,0
00005e f061      	BREQ __GLOBAL_INI_END
00005f 91a5      	LPM  R26,Z+
000060 91b5      	LPM  R27,Z+
000061 9005      	LPM  R0,Z+
000062 9015      	LPM  R1,Z+
000063 01bf      	MOVW R22,R30
000064 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000065 9005      	LPM  R0,Z+
000066 920d      	ST   X+,R0
000067 9701      	SBIW R24,1
000068 f7e1      	BRNE __GLOBAL_INI_LOOP
000069 01fb      	MOVW R30,R22
00006a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006c bfed      	OUT  SPL,R30
00006d e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000070 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000071 940c 00af 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;unsigned char int_to_char(int x) {
                 ; 0000 0005 unsigned char int_to_char(int x) {
                 
                 	.CSEG
                 _int_to_char:
                 ; .FSTART _int_to_char
                 ; 0000 0006 	return x + '0';
000073 93ba      	ST   -Y,R27
000074 93aa      	ST   -Y,R26
                 ;	x -> Y+0
000075 81e8      	LD   R30,Y
000076 5de0      	SUBI R30,-LOW(48)
000077 c099      	RJMP _0x2020002
                 ; 0000 0007 }
                 ; .FEND
                 ;
                 ;void put_on_lcd(int value, int c) {
                 ; 0000 0009 void put_on_lcd(int value, int c) {
                 _put_on_lcd:
                 ; .FSTART _put_on_lcd
                 ; 0000 000A 	unsigned int r = 1;
                 ; 0000 000B 	unsigned char tens = int_to_char(value / 10);
                 ; 0000 000C 	unsigned char ones = int_to_char(value % 10);
                 ; 0000 000D 	lcd_gotoxy(c, r);
000078 93ba      	ST   -Y,R27
000079 93aa      	ST   -Y,R26
00007a 940e 02ae 	CALL __SAVELOCR4
                 ;	value -> Y+6
                 ;	c -> Y+4
                 ;	r -> R16,R17
                 ;	tens -> R19
                 ;	ones -> R18
                +
00007c e001     +LDI R16 , LOW ( 1 )
00007d e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
00007e 81ae      	LDD  R26,Y+6
00007f 81bf      	LDD  R27,Y+6+1
000080 e0ea      	LDI  R30,LOW(10)
000081 e0f0      	LDI  R31,HIGH(10)
000082 940e 028d 	CALL __DIVW21
000084 01df      	MOVW R26,R30
000085 dfed      	RCALL _int_to_char
000086 2f3e      	MOV  R19,R30
000087 81ae      	LDD  R26,Y+6
000088 81bf      	LDD  R27,Y+6+1
000089 e0ea      	LDI  R30,LOW(10)
00008a e0f0      	LDI  R31,HIGH(10)
00008b 940e 0292 	CALL __MODW21
00008d 01df      	MOVW R26,R30
00008e dfe4      	RCALL _int_to_char
00008f 2f2e      	MOV  R18,R30
000090 81ec      	LDD  R30,Y+4
000091 93ea      	ST   -Y,R30
000092 2fa0      	MOV  R26,R16
000093 d072      	RCALL _lcd_gotoxy
                 ; 0000 000E 	lcd_putchar(tens);
000094 2fa3      	MOV  R26,R19
000095 d087      	RCALL _lcd_putchar
                 ; 0000 000F 	lcd_gotoxy(c + 1, r);
000096 81ec      	LDD  R30,Y+4
000097 5fef      	SUBI R30,-LOW(1)
000098 93ea      	ST   -Y,R30
000099 2fa0      	MOV  R26,R16
00009a d06b      	RCALL _lcd_gotoxy
                 ; 0000 0010 	lcd_putchar(ones);
00009b 2fa2      	MOV  R26,R18
00009c d080      	RCALL _lcd_putchar
                 ; 0000 0011 }
00009d 940e 02b3 	CALL __LOADLOCR4
00009f 9628      	ADIW R28,8
0000a0 9508      	RET
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input) {
                 ; 0000 0017 unsigned int read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0018 	ADMUX = adc_input | ADC_VREF_TYPE;
0000a1 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000a2 81e8      	LD   R30,Y
0000a3 64e0      	ORI  R30,0x40
0000a4 b9e7      	OUT  0x7,R30
                 ; 0000 0019 	// Delay needed for the stabilization of the ADC input voltage
                 ; 0000 001A 	delay_us(10);
                +
0000a5 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000a6 958a     +DEC R24
0000a7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 001B     // Start the AD conversion
                 ; 0000 001C     ADCSRA |= (1 << ADSC);
0000a8 9a36      	SBI  0x6,6
                 ; 0000 001D     // Wait for the AD conversion to complete
                 ; 0000 001E     while ((ADCSRA & (1 << ADIF)) == 0);
                 _0x3:
0000a9 9b34      	SBIS 0x6,4
0000aa cffe      	RJMP _0x3
                 ; 0000 001F     ADCSRA |= (1 << ADIF);
0000ab 9a34      	SBI  0x6,4
                 ; 0000 0020     return ADCW;
0000ac b1e4      	IN   R30,0x4
0000ad b1f5      	IN   R31,0x4+1
0000ae c0bd      	RJMP _0x2020001
                 ; 0000 0021 }
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 0023 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0024     int temprature;
                 ; 0000 0025 
                 ; 0000 0026     // ADC initialization
                 ; 0000 0027     // ADC Clock frequency: 250.000 kHz
                 ; 0000 0028     // ADC Voltage Reference: AVCC pin
                 ; 0000 0029     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 002A     ADMUX |= (1<<MUX0);
                 ;	temprature -> R16,R17
0000af 9a38      	SBI  0x7,0
                 ; 0000 002B     //ADMUX=ADC_VREF_TYPE;
                 ; 0000 002C     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
0000b0 e8e5      	LDI  R30,LOW(133)
0000b1 b9e6      	OUT  0x6,R30
                 ; 0000 002D     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bfe0      	OUT  0x30,R30
                 ; 0000 002E 
                 ; 0000 002F     lcd_init(16);
0000b4 e1a0      	LDI  R26,LOW(16)
0000b5 d08d      	RCALL _lcd_init
                 ; 0000 0030 
                 ; 0000 0031     lcd_gotoxy(3, 0);
0000b6 e0e3      	LDI  R30,LOW(3)
0000b7 93ea      	ST   -Y,R30
0000b8 e0a0      	LDI  R26,LOW(0)
0000b9 d04c      	RCALL _lcd_gotoxy
                 ; 0000 0032     lcd_puts("LM35 Sensor");
                +
0000ba e6a0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
0000bb e0b2     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
0000bc d075      	RCALL _lcd_puts
                 ; 0000 0033 
                 ; 0000 0034     lcd_gotoxy(2, 1);
0000bd e0e2      	LDI  R30,LOW(2)
0000be d0af      	RCALL SUBOPT_0x0
                 ; 0000 0035     lcd_puts("Temp :");
                +
0000bf e6ac     +LDI R26 , LOW ( _0x6 + ( 12 ) )
0000c0 e0b2     +LDI R27 , HIGH ( _0x6 + ( 12 ) )
                 	__POINTW2MN _0x6,12
0000c1 d070      	RCALL _lcd_puts
                 ; 0000 0036 
                 ; 0000 0037     lcd_gotoxy(12, 1);
0000c2 e0ec      	LDI  R30,LOW(12)
0000c3 d0aa      	RCALL SUBOPT_0x0
                 ; 0000 0038     lcd_putchar(223);
0000c4 edaf      	LDI  R26,LOW(223)
0000c5 d057      	RCALL _lcd_putchar
                 ; 0000 0039 
                 ; 0000 003A     lcd_gotoxy(13, 1);
0000c6 e0ed      	LDI  R30,LOW(13)
0000c7 d0a6      	RCALL SUBOPT_0x0
                 ; 0000 003B     lcd_puts("C");
                +
0000c8 e7a3     +LDI R26 , LOW ( _0x6 + ( 19 ) )
0000c9 e0b2     +LDI R27 , HIGH ( _0x6 + ( 19 ) )
                 	__POINTW2MN _0x6,19
0000ca d067      	RCALL _lcd_puts
                 ; 0000 003C 
                 ; 0000 003D     while (1) {
                 _0x7:
                 ; 0000 003E         temprature = read_adc(0);
0000cb e0a0      	LDI  R26,LOW(0)
0000cc dfd4      	RCALL _read_adc
0000cd 018f      	MOVW R16,R30
                 ; 0000 003F         temprature = temprature * 0.48898;
0000ce 940e 0275 	CALL __CWD1
0000d0 940e 01ed 	CALL __CDF1
                +
0000d2 e9a6     +LDI R26 , LOW ( 0x3EFA5B96 )
0000d3 e5bb     +LDI R27 , HIGH ( 0x3EFA5B96 )
0000d4 ef8a     +LDI R24 , BYTE3 ( 0x3EFA5B96 )
0000d5 e39e     +LDI R25 , BYTE4 ( 0x3EFA5B96 )
                 	__GETD2N 0x3EFA5B96
0000d6 940e 021b 	CALL __MULF12
0000d8 940e 01b6 	CALL __CFD1
0000da 018f      	MOVW R16,R30
                 ; 0000 0040         put_on_lcd(temprature, 9);
0000db 931a      	ST   -Y,R17
0000dc 930a      	ST   -Y,R16
0000dd e0a9      	LDI  R26,LOW(9)
0000de e0b0      	LDI  R27,0
0000df df98      	RCALL _put_on_lcd
                 ; 0000 0041         delay_ms(100);
0000e0 e6a4      	LDI  R26,LOW(100)
0000e1 e0b0      	LDI  R27,0
0000e2 940e 017d 	CALL _delay_ms
                 ; 0000 0042     }
0000e4 cfe6      	RJMP _0x7
                 ; 0000 0043 }
                 _0xA:
0000e5 cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000260           	.BYTE 0x15
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000e6 93aa      	ST   -Y,R26
0000e7 b3e5      	IN   R30,0x15
0000e8 70ef      	ANDI R30,LOW(0xF)
0000e9 2fae      	MOV  R26,R30
0000ea 81e8      	LD   R30,Y
0000eb 7fe0      	ANDI R30,LOW(0xF0)
0000ec 2bea      	OR   R30,R26
0000ed bbe5      	OUT  0x15,R30
                +
0000ee e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ef 958a     +DEC R24
0000f0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f1 9aaa      	SBI  0x15,2
                +
0000f2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f3 958a     +DEC R24
0000f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f5 98aa      	CBI  0x15,2
                +
0000f6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f7 958a     +DEC R24
0000f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f9 c072      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000fa 93aa      	ST   -Y,R26
0000fb 81a8      	LD   R26,Y
0000fc dfe9      	RCALL __lcd_write_nibble_G100
0000fd 81e8          ld    r30,y
0000fe 95e2          swap  r30
0000ff 83e8          st    y,r30
000100 81a8      	LD   R26,Y
000101 dfe4      	RCALL __lcd_write_nibble_G100
                +
000102 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000103 958a     +DEC R24
000104 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000105 c066      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000106 93aa      	ST   -Y,R26
000107 81e8      	LD   R30,Y
000108 e0f0      	LDI  R31,0
000109 58eb      	SUBI R30,LOW(-__base_y_G100)
00010a 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00010b 81e0      	LD   R30,Z
00010c 81a9      	LDD  R26,Y+1
00010d 0fae      	ADD  R26,R30
00010e dfeb      	RCALL __lcd_write_data
00010f 8059      	LDD  R5,Y+1
000110 8048      	LDD  R4,Y+0
                 _0x2020002:
000111 9622      	ADIW R28,2
000112 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000113 e0a2      	LDI  R26,LOW(2)
000114 d05c      	RCALL SUBOPT_0x1
000115 e0ac      	LDI  R26,LOW(12)
000116 dfe3      	RCALL __lcd_write_data
000117 e0a1      	LDI  R26,LOW(1)
000118 d058      	RCALL SUBOPT_0x1
000119 e0e0      	LDI  R30,LOW(0)
00011a 2e4e      	MOV  R4,R30
00011b 2e5e      	MOV  R5,R30
00011c 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00011d 93aa      	ST   -Y,R26
00011e 81a8      	LD   R26,Y
00011f 30aa      	CPI  R26,LOW(0xA)
000120 f011      	BREQ _0x2000005
000121 1457      	CP   R5,R7
000122 f048      	BRLO _0x2000004
                 _0x2000005:
000123 e0e0      	LDI  R30,LOW(0)
000124 93ea      	ST   -Y,R30
000125 9443      	INC  R4
000126 2da4      	MOV  R26,R4
000127 dfde      	RCALL _lcd_gotoxy
000128 81a8      	LD   R26,Y
000129 30aa      	CPI  R26,LOW(0xA)
00012a f409      	BRNE _0x2000007
00012b c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
00012c 9453      	INC  R5
00012d 9aa8      	SBI  0x15,0
00012e 81a8      	LD   R26,Y
00012f dfca      	RCALL __lcd_write_data
000130 98a8      	CBI  0x15,0
000131 c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000132 93ba      	ST   -Y,R27
000133 93aa      	ST   -Y,R26
000134 931a      	ST   -Y,R17
                 _0x2000008:
000135 81a9      	LDD  R26,Y+1
000136 81ba      	LDD  R27,Y+1+1
000137 91ed      	LD   R30,X+
000138 83a9      	STD  Y+1,R26
000139 83ba      	STD  Y+1+1,R27
00013a 2f1e      	MOV  R17,R30
00013b 30e0      	CPI  R30,0
00013c f019      	BREQ _0x200000A
00013d 2fa1      	MOV  R26,R17
00013e dfde      	RCALL _lcd_putchar
00013f cff5      	RJMP _0x2000008
                 _0x200000A:
000140 8118      	LDD  R17,Y+0
000141 9623      	ADIW R28,3
000142 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000143 93aa      	ST   -Y,R26
000144 b3e4      	IN   R30,0x14
000145 6fe0      	ORI  R30,LOW(0xF0)
000146 bbe4      	OUT  0x14,R30
000147 9aa2      	SBI  0x14,2
000148 9aa0      	SBI  0x14,0
000149 9aa1      	SBI  0x14,1
00014a 98aa      	CBI  0x15,2
00014b 98a8      	CBI  0x15,0
00014c 98a9      	CBI  0x15,1
00014d 8078      	LDD  R7,Y+0
00014e 81e8      	LD   R30,Y
00014f 58e0      	SUBI R30,-LOW(128)
                +
000150 93e0 0277+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000152 81e8      	LD   R30,Y
000153 54e0      	SUBI R30,-LOW(192)
                +
000154 93e0 0278+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000156 e1a4      	LDI  R26,LOW(20)
000157 e0b0      	LDI  R27,0
000158 940e 017d 	CALL _delay_ms
00015a d01b      	RCALL SUBOPT_0x2
00015b d01a      	RCALL SUBOPT_0x2
00015c d019      	RCALL SUBOPT_0x2
00015d e2a0      	LDI  R26,LOW(32)
00015e df87      	RCALL __lcd_write_nibble_G100
                +
00015f ec88     +LDI R24 , LOW ( 200 )
000160 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000161 9701     +SBIW R24 , 1
000162 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000163 e2a8      	LDI  R26,LOW(40)
000164 df95      	RCALL __lcd_write_data
000165 e0a4      	LDI  R26,LOW(4)
000166 df93      	RCALL __lcd_write_data
000167 e8a5      	LDI  R26,LOW(133)
000168 df91      	RCALL __lcd_write_data
000169 e0a6      	LDI  R26,LOW(6)
00016a df8f      	RCALL __lcd_write_data
00016b dfa7      	RCALL _lcd_clear
                 _0x2020001:
00016c 9621      	ADIW R28,1
00016d 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000275           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00016e 93ea      	ST   -Y,R30
00016f e0a1      	LDI  R26,LOW(1)
000170 cf95      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000171 df88      	RCALL __lcd_write_data
000172 e0a3      	LDI  R26,LOW(3)
000173 e0b0      	LDI  R27,0
000174 940c 017d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000176 e3a0      	LDI  R26,LOW(48)
000177 df6e      	RCALL __lcd_write_nibble_G100
                +
000178 ec88     +LDI R24 , LOW ( 200 )
000179 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00017a 9701     +SBIW R24 , 1
00017b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00017c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00017d 9610      	adiw r26,0
00017e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00017f ed80     +LDI R24 , LOW ( 0x7D0 )
000180 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000181 9701     +SBIW R24 , 1
000182 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000183 95a8      	wdr
000184 9711      	sbiw r26,1
000185 f7c9      	brne __delay_ms0
                 __delay_ms1:
000186 9508      	ret
                 
                 __ROUND_REPACK:
000187 2355      	TST  R21
000188 f442      	BRPL __REPACK
000189 3850      	CPI  R21,0x80
00018a f411      	BRNE __ROUND_REPACK0
00018b ffe0      	SBRS R30,0
00018c c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00018d 9631      	ADIW R30,1
00018e 1f69      	ADC  R22,R25
00018f 1f79      	ADC  R23,R25
000190 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000191 e850      	LDI  R21,0x80
000192 2757      	EOR  R21,R23
000193 f411      	BRNE __REPACK0
000194 935f      	PUSH R21
000195 c073      	RJMP __ZERORES
                 __REPACK0:
000196 3f5f      	CPI  R21,0xFF
000197 f031      	BREQ __REPACK1
000198 0f66      	LSL  R22
000199 0c00      	LSL  R0
00019a 9557      	ROR  R21
00019b 9567      	ROR  R22
00019c 2f75      	MOV  R23,R21
00019d 9508      	RET
                 __REPACK1:
00019e 935f      	PUSH R21
00019f 2000      	TST  R0
0001a0 f00a      	BRMI __REPACK2
0001a1 c073      	RJMP __MAXRES
                 __REPACK2:
0001a2 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0001a3 e850      	LDI  R21,0x80
0001a4 2e19      	MOV  R1,R25
0001a5 2215      	AND  R1,R21
0001a6 0f88      	LSL  R24
0001a7 1f99      	ROL  R25
0001a8 2795      	EOR  R25,R21
0001a9 0f55      	LSL  R21
0001aa 9587      	ROR  R24
                 
                 __UNPACK1:
0001ab e850      	LDI  R21,0x80
0001ac 2e07      	MOV  R0,R23
0001ad 2205      	AND  R0,R21
0001ae 0f66      	LSL  R22
0001af 1f77      	ROL  R23
0001b0 2775      	EOR  R23,R21
0001b1 0f55      	LSL  R21
0001b2 9567      	ROR  R22
0001b3 9508      	RET
                 
                 __CFD1U:
0001b4 9468      	SET
0001b5 c001      	RJMP __CFD1U0
                 __CFD1:
0001b6 94e8      	CLT
                 __CFD1U0:
0001b7 935f      	PUSH R21
0001b8 dff2      	RCALL __UNPACK1
0001b9 3870      	CPI  R23,0x80
0001ba f018      	BRLO __CFD10
0001bb 3f7f      	CPI  R23,0xFF
0001bc f408      	BRCC __CFD10
0001bd c04b      	RJMP __ZERORES
                 __CFD10:
0001be e156      	LDI  R21,22
0001bf 1b57      	SUB  R21,R23
0001c0 f4aa      	BRPL __CFD11
0001c1 9551      	NEG  R21
0001c2 3058      	CPI  R21,8
0001c3 f40e      	BRTC __CFD19
0001c4 3059      	CPI  R21,9
                 __CFD19:
0001c5 f030      	BRLO __CFD17
0001c6 efef      	SER  R30
0001c7 efff      	SER  R31
0001c8 ef6f      	SER  R22
0001c9 e77f      	LDI  R23,0x7F
0001ca f977      	BLD  R23,7
0001cb c01a      	RJMP __CFD15
                 __CFD17:
0001cc 2777      	CLR  R23
0001cd 2355      	TST  R21
0001ce f0b9      	BREQ __CFD15
                 __CFD18:
0001cf 0fee      	LSL  R30
0001d0 1fff      	ROL  R31
0001d1 1f66      	ROL  R22
0001d2 1f77      	ROL  R23
0001d3 955a      	DEC  R21
0001d4 f7d1      	BRNE __CFD18
0001d5 c010      	RJMP __CFD15
                 __CFD11:
0001d6 2777      	CLR  R23
                 __CFD12:
0001d7 3058      	CPI  R21,8
0001d8 f028      	BRLO __CFD13
0001d9 2fef      	MOV  R30,R31
0001da 2ff6      	MOV  R31,R22
0001db 2f67      	MOV  R22,R23
0001dc 5058      	SUBI R21,8
0001dd cff9      	RJMP __CFD12
                 __CFD13:
0001de 2355      	TST  R21
0001df f031      	BREQ __CFD15
                 __CFD14:
0001e0 9576      	LSR  R23
0001e1 9567      	ROR  R22
0001e2 95f7      	ROR  R31
0001e3 95e7      	ROR  R30
0001e4 955a      	DEC  R21
0001e5 f7d1      	BRNE __CFD14
                 __CFD15:
0001e6 2000      	TST  R0
0001e7 f40a      	BRPL __CFD16
0001e8 d084      	RCALL __ANEGD1
                 __CFD16:
0001e9 915f      	POP  R21
0001ea 9508      	RET
                 
                 __CDF1U:
0001eb 9468      	SET
0001ec c001      	RJMP __CDF1U0
                 __CDF1:
0001ed 94e8      	CLT
                 __CDF1U0:
0001ee 9730      	SBIW R30,0
0001ef 4060      	SBCI R22,0
0001f0 4070      	SBCI R23,0
0001f1 f0b1      	BREQ __CDF10
0001f2 2400      	CLR  R0
0001f3 f026      	BRTS __CDF11
0001f4 2377      	TST  R23
0001f5 f412      	BRPL __CDF11
0001f6 9400      	COM  R0
0001f7 d075      	RCALL __ANEGD1
                 __CDF11:
0001f8 2e17      	MOV  R1,R23
0001f9 e17e      	LDI  R23,30
0001fa 2011      	TST  R1
                 __CDF12:
0001fb f032      	BRMI __CDF13
0001fc 957a      	DEC  R23
0001fd 0fee      	LSL  R30
0001fe 1fff      	ROL  R31
0001ff 1f66      	ROL  R22
000200 1c11      	ROL  R1
000201 cff9      	RJMP __CDF12
                 __CDF13:
000202 2fef      	MOV  R30,R31
000203 2ff6      	MOV  R31,R22
000204 2d61      	MOV  R22,R1
000205 935f      	PUSH R21
000206 df8a      	RCALL __REPACK
000207 915f      	POP  R21
                 __CDF10:
000208 9508      	RET
                 
                 __ZERORES:
000209 27ee      	CLR  R30
00020a 27ff      	CLR  R31
00020b 2766      	CLR  R22
00020c 2777      	CLR  R23
00020d 915f      	POP  R21
00020e 9508      	RET
                 
                 __MINRES:
00020f efef      	SER  R30
000210 efff      	SER  R31
000211 e76f      	LDI  R22,0x7F
000212 ef7f      	SER  R23
000213 915f      	POP  R21
000214 9508      	RET
                 
                 __MAXRES:
000215 efef      	SER  R30
000216 efff      	SER  R31
000217 e76f      	LDI  R22,0x7F
000218 e77f      	LDI  R23,0x7F
000219 915f      	POP  R21
00021a 9508      	RET
                 
                 __MULF12:
00021b 935f      	PUSH R21
00021c df86      	RCALL __UNPACK
00021d 3870      	CPI  R23,0x80
00021e f351      	BREQ __ZERORES
00021f 3890      	CPI  R25,0x80
000220 f341      	BREQ __ZERORES
000221 2401      	EOR  R0,R1
000222 9408      	SEC
000223 1f79      	ADC  R23,R25
000224 f423      	BRVC __MULF124
000225 f31c      	BRLT __ZERORES
                 __MULF125:
000226 2000      	TST  R0
000227 f33a      	BRMI __MINRES
000228 cfec      	RJMP __MAXRES
                 __MULF124:
000229 920f      	PUSH R0
00022a 931f      	PUSH R17
00022b 932f      	PUSH R18
00022c 933f      	PUSH R19
00022d 934f      	PUSH R20
00022e 2711      	CLR  R17
00022f 2722      	CLR  R18
000230 2799      	CLR  R25
000231 9f68      	MUL  R22,R24
000232 01a0      	MOVW R20,R0
000233 9f8f      	MUL  R24,R31
000234 2d30      	MOV  R19,R0
000235 0d41      	ADD  R20,R1
000236 1f59      	ADC  R21,R25
000237 9f6b      	MUL  R22,R27
000238 0d30      	ADD  R19,R0
000239 1d41      	ADC  R20,R1
00023a 1f59      	ADC  R21,R25
00023b 9f8e      	MUL  R24,R30
00023c d027      	RCALL __MULF126
00023d 9fbf      	MUL  R27,R31
00023e d025      	RCALL __MULF126
00023f 9f6a      	MUL  R22,R26
000240 d023      	RCALL __MULF126
000241 9fbe      	MUL  R27,R30
000242 d01d      	RCALL __MULF127
000243 9faf      	MUL  R26,R31
000244 d01b      	RCALL __MULF127
000245 9fae      	MUL  R26,R30
000246 0d11      	ADD  R17,R1
000247 1f29      	ADC  R18,R25
000248 1f39      	ADC  R19,R25
000249 1f49      	ADC  R20,R25
00024a 1f59      	ADC  R21,R25
00024b 2fe3      	MOV  R30,R19
00024c 2ff4      	MOV  R31,R20
00024d 2f65      	MOV  R22,R21
00024e 2f52      	MOV  R21,R18
00024f 914f      	POP  R20
000250 913f      	POP  R19
000251 912f      	POP  R18
000252 911f      	POP  R17
000253 900f      	POP  R0
000254 2366      	TST  R22
000255 f02a      	BRMI __MULF122
000256 0f55      	LSL  R21
000257 1fee      	ROL  R30
000258 1fff      	ROL  R31
000259 1f66      	ROL  R22
00025a c002      	RJMP __MULF123
                 __MULF122:
00025b 9573      	INC  R23
00025c f24b      	BRVS __MULF125
                 __MULF123:
00025d df29      	RCALL __ROUND_REPACK
00025e 915f      	POP  R21
00025f 9508      	RET
                 
                 __MULF127:
000260 0d10      	ADD  R17,R0
000261 1d21      	ADC  R18,R1
000262 1f39      	ADC  R19,R25
000263 c002      	RJMP __MULF128
                 __MULF126:
000264 0d20      	ADD  R18,R0
000265 1d31      	ADC  R19,R1
                 __MULF128:
000266 1f49      	ADC  R20,R25
000267 1f59      	ADC  R21,R25
000268 9508      	RET
                 
                 __ANEGW1:
000269 95f1      	NEG  R31
00026a 95e1      	NEG  R30
00026b 40f0      	SBCI R31,0
00026c 9508      	RET
                 
                 __ANEGD1:
00026d 95f0      	COM  R31
00026e 9560      	COM  R22
00026f 9570      	COM  R23
000270 95e1      	NEG  R30
000271 4fff      	SBCI R31,-1
000272 4f6f      	SBCI R22,-1
000273 4f7f      	SBCI R23,-1
000274 9508      	RET
                 
                 __CWD1:
000275 2f6f      	MOV  R22,R31
000276 0f66      	ADD  R22,R22
000277 0b66      	SBC  R22,R22
000278 2f76      	MOV  R23,R22
000279 9508      	RET
                 
                 __DIVW21U:
00027a 2400      	CLR  R0
00027b 2411      	CLR  R1
00027c e190      	LDI  R25,16
                 __DIVW21U1:
00027d 0faa      	LSL  R26
00027e 1fbb      	ROL  R27
00027f 1c00      	ROL  R0
000280 1c11      	ROL  R1
000281 1a0e      	SUB  R0,R30
000282 0a1f      	SBC  R1,R31
000283 f418      	BRCC __DIVW21U2
000284 0e0e      	ADD  R0,R30
000285 1e1f      	ADC  R1,R31
000286 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000287 60a1      	SBR  R26,1
                 __DIVW21U3:
000288 959a      	DEC  R25
000289 f799      	BRNE __DIVW21U1
00028a 01fd      	MOVW R30,R26
00028b 01d0      	MOVW R26,R0
00028c 9508      	RET
                 
                 __DIVW21:
00028d d012      	RCALL __CHKSIGNW
00028e dfeb      	RCALL __DIVW21U
00028f f40e      	BRTC __DIVW211
000290 dfd8      	RCALL __ANEGW1
                 __DIVW211:
000291 9508      	RET
                 
                 __MODW21:
000292 94e8      	CLT
000293 ffb7      	SBRS R27,7
000294 c004      	RJMP __MODW211
000295 95a0      	COM  R26
000296 95b0      	COM  R27
000297 9611      	ADIW R26,1
000298 9468      	SET
                 __MODW211:
000299 fdf7      	SBRC R31,7
00029a dfce      	RCALL __ANEGW1
00029b dfde      	RCALL __DIVW21U
00029c 01fd      	MOVW R30,R26
00029d f40e      	BRTC __MODW212
00029e dfca      	RCALL __ANEGW1
                 __MODW212:
00029f 9508      	RET
                 
                 __CHKSIGNW:
0002a0 94e8      	CLT
0002a1 fff7      	SBRS R31,7
0002a2 c002      	RJMP __CHKSW1
0002a3 dfc5      	RCALL __ANEGW1
0002a4 9468      	SET
                 __CHKSW1:
0002a5 ffb7      	SBRS R27,7
0002a6 c006      	RJMP __CHKSW2
0002a7 95a0      	COM  R26
0002a8 95b0      	COM  R27
0002a9 9611      	ADIW R26,1
0002aa f800      	BLD  R0,0
0002ab 9403      	INC  R0
0002ac fa00      	BST  R0,0
                 __CHKSW2:
0002ad 9508      	RET
                 
                 __SAVELOCR4:
0002ae 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002af 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002b0 931a      	ST   -Y,R17
0002b1 930a      	ST   -Y,R16
0002b2 9508      	RET
                 
                 __LOADLOCR4:
0002b3 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002b4 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002b5 8119      	LDD  R17,Y+1
0002b6 8108      	LD   R16,Y
0002b7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  28 r1 :  17 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:  13 r18:  11 r19:  12 r20:   8 r21:  44 r22:  33 r23:  30 
r24:  29 r25:  25 r26:  71 r27:  25 r28:   5 r29:   1 r30:  98 r31:  35 
x  :   4 y  :  56 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   8 
adiw  :   8 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  10 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   1 brmi  :   4 brne  :  18 brpl  :   4 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  10 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :   1 cpc   :   0 cpi   :  12 cpse  :   0 dec   :  10 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  23 ld    :  15 ldd   :  16 ldi   :  81 
lds   :   0 lpm   :   7 lsl   :  10 lsr   :   1 mov   :  29 movw  :  11 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   2 out   :  13 pop   :  11 push  :  10 rcall :  55 ret   :  25 
reti  :   0 rjmp  :  30 rol   :  14 ror   :   7 sbc   :   2 sbci  :   7 
sbi   :   8 sbic  :   0 sbis  :   1 sbiw  :   8 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   2 sts   :   2 sub   :   2 subi  :   6 swap  :   1 
tst   :   9 wdr   :   1 
Instructions used: 70 out of 116 (60.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000570   1342     50   1392   32768   4.2%
[.dseg] 0x000060 0x000279      0     25     25    2048   1.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
