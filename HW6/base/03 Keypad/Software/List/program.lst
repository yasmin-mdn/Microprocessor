
AVRASM ver. 2.1.30  C:\Users\ali_s\Desktop\Micro TA Session\03 Keypad\Software\List\program.asm Sun Jan 02 11:53:54 2022

C:\Users\ali_s\Desktop\Micro TA Session\03 Keypad\Software\List\program.asm(1072): warning: Register r4 already defined by the .DEF directive
C:\Users\ali_s\Desktop\Micro TA Session\03 Keypad\Software\List\program.asm(1073): warning: Register r7 already defined by the .DEF directive
C:\Users\ali_s\Desktop\Micro TA Session\03 Keypad\Software\List\program.asm(1074): warning: Register r6 already defined by the .DEF directive
C:\Users\ali_s\Desktop\Micro TA Session\03 Keypad\Software\List\program.asm(1075): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counter=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3B:
00002a 0000      	.DB  0x0,0x0
                 _0x2000003:
00002b c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\ali_s\Desktop\Micro TA Session\03 Keypad\Software\List\program.asm(1111): warning: .cseg .db misalignment - padding zero byte
00002c 0001      	.DB  0x1
                 _0x2020000:
00002d 4e2d
00002e 4e41
00002f 4900
000030 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ali_s\Desktop\Micro TA Session\03 Keypad\Software\List\program.asm(1114): warning: .cseg .db misalignment - padding zero byte
000031 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000032 0002      	.DW  0x02
000033 0004      	.DW  0x04
000034 0054      	.DW  _0x3B*2
                 
000035 0002      	.DW  0x02
000036 026c      	.DW  __base_y_G100
000037 0056      	.DW  _0x2000003*2
                 
000038 0001      	.DW  0x01
000039 0270      	.DW  __seed_G101
00003a 0058      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000043 e1f8      	LDI  R31,0x18
000044 bdf1      	OUT  WDTCR,R31
000045 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000046 e08d      	LDI  R24,(14-2)+1
000047 e0a2      	LDI  R26,2
000048 27bb      	CLR  R27
                 __CLEAR_REG:
000049 93ed      	ST   X+,R30
00004a 958a      	DEC  R24
00004b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004d e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004f 93ed      	ST   X+,R30
000050 9701      	SBIW R24,1
000051 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000052 e6e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000053 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000054 9185      	LPM  R24,Z+
000055 9195      	LPM  R25,Z+
000056 9700      	SBIW R24,0
000057 f061      	BREQ __GLOBAL_INI_END
000058 91a5      	LPM  R26,Z+
000059 91b5      	LPM  R27,Z+
00005a 9005      	LPM  R0,Z+
00005b 9015      	LPM  R1,Z+
00005c 01bf      	MOVW R22,R30
00005d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005e 9005      	LPM  R0,Z+
00005f 920d      	ST   X+,R0
000060 9701      	SBIW R24,1
000061 f7e1      	BRNE __GLOBAL_INI_LOOP
000062 01fb      	MOVW R30,R22
000063 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000064 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000065 bfed      	OUT  SPL,R30
000066 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000067 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000068 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000069 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006a 940c 006c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define KEYPAD_R1 PORTD.0
                 ;#define KEYPAD_R2 PORTD.1
                 ;#define KEYPAD_R3 PORTD.2
                 ;#define KEYPAD_R4 PORTD.3
                 ;#define KEYPAD_C1 PIND.4
                 ;#define KEYPAD_C2 PIND.5
                 ;#define KEYPAD_C3 PIND.6
                 ;#define KEYPAD_C4 PIND.7
                 ;
                 ;#define KEYPAD_NUM0 0
                 ;#define KEYPAD_NUM1 1
                 ;#define KEYPAD_NUM2 2
                 ;#define KEYPAD_NUM3 3
                 ;#define KEYPAD_NUM4 4
                 ;#define KEYPAD_NUM5 5
                 ;#define KEYPAD_NUM6 6
                 ;#define KEYPAD_NUM7 7
                 ;#define KEYPAD_NUM8 8
                 ;#define KEYPAD_NUM9 9
                 ;
                 ;unsigned char keypad_scan();
                 ;
                 ;float number[3];
                 ;int counter = 0;
                 ;
                 ;void main(void) {
                 ; 0000 001F void main(void) {
                 
                 	.CSEG
                 _main:
                 ; 0000 0020     unsigned char key_res;
                 ; 0000 0021     DDRC = 0xFF;
                 ;	key_res -> R17
00006c efef      	LDI  R30,LOW(255)
00006d bbe4      	OUT  0x14,R30
                 ; 0000 0022     DDRD = 0x0F;
00006e e0ef      	LDI  R30,LOW(15)
00006f bbe1      	OUT  0x11,R30
                 ; 0000 0023     PORTC = 0x00;
000070 e0e0      	LDI  R30,LOW(0)
000071 bbe5      	OUT  0x15,R30
                 ; 0000 0024 
                 ; 0000 0025     lcd_init(16);
000072 e1a0      	LDI  R26,LOW(16)
000073 d0bb      	RCALL _lcd_init
                 ; 0000 0026     lcd_clear();
000074 d09a      	RCALL _lcd_clear
                 ; 0000 0027 
                 ; 0000 0028     while (1) {
                 _0x3:
                 ; 0000 0029         key_res = keypad_scan();
000075 d033      	RCALL _keypad_scan
000076 2f1e      	MOV  R17,R30
                 ; 0000 002A 
                 ; 0000 002B         if (key_res != 255) {
000077 3f1f      	CPI  R17,255
000078 f171      	BREQ _0x6
                 ; 0000 002C             while (keypad_scan() != 255);
                 _0x7:
000079 d02f      	RCALL _keypad_scan
00007a 3fef      	CPI  R30,LOW(0xFF)
00007b f7e9      	BRNE _0x7
                 ; 0000 002D             delay_ms(20);
00007c 940e 015b 	CALL SUBOPT_0x0
                 ; 0000 002E             lcd_putchar(key_res + 48);
00007e 2fa1      	MOV  R26,R17
00007f 5da0      	SUBI R26,-LOW(48)
000080 d09a      	RCALL _lcd_putchar
                 ; 0000 002F             number[counter] *= 10;
000081 940e 015f 	CALL SUBOPT_0x1
000083 93ff      	PUSH R31
000084 93ef      	PUSH R30
000085 01df      	MOVW R26,R30
000086 940e 029b 	CALL __GETD1P
                +
000088 e0a0     +LDI R26 , LOW ( 0x41200000 )
000089 e0b0     +LDI R27 , HIGH ( 0x41200000 )
00008a e280     +LDI R24 , BYTE3 ( 0x41200000 )
00008b e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
00008c 940e 023b 	CALL __MULF12
00008e 91af      	POP  R26
00008f 91bf      	POP  R27
000090 940e 02a1 	CALL __PUTDP1
                 ; 0000 0030             number[counter] += key_res;
000092 940e 015f 	CALL SUBOPT_0x1
000094 93ff      	PUSH R31
000095 93ef      	PUSH R30
000096 01df      	MOVW R26,R30
000097 940e 029b 	CALL __GETD1P
000099 01df      	MOVW R26,R30
00009a 01cb      	MOVW R24,R22
00009b 2fe1      	MOV  R30,R17
00009c e0f0      	LDI  R31,0
00009d 940e 0296 	CALL __CWD1
00009f 940e 01b8 	CALL __CDF1
0000a1 940e 01eb 	CALL __ADDF12
0000a3 91af      	POP  R26
0000a4 91bf      	POP  R27
0000a5 940e 02a1 	CALL __PUTDP1
                 ; 0000 0031         }
                 ; 0000 0032     }
                 _0x6:
0000a7 cfcd      	RJMP _0x3
                 ; 0000 0033 }
                 _0xA:
0000a8 cfff      	RJMP _0xA
                 ;
                 ;
                 ;unsigned char keypad_scan() {
                 ; 0000 0036 unsigned char keypad_scan() {
                 _keypad_scan:
                 ; 0000 0037     unsigned char result = 255;
                 ; 0000 0038 
                 ; 0000 0039     ////////////////////////  ROW1 ////////////////////////
                 ; 0000 003A     KEYPAD_R1 = 1;
0000a9 931a      	ST   -Y,R17
                 ;	result -> R17
0000aa ef1f      	LDI  R17,255
0000ab 9a90      	SBI  0x12,0
                 ; 0000 003B     KEYPAD_R2 = 0;
0000ac 9891      	CBI  0x12,1
                 ; 0000 003C     KEYPAD_R3 = 0;
0000ad 940e 0167 	CALL SUBOPT_0x2
                 ; 0000 003D     KEYPAD_R4 = 0;
                 ; 0000 003E 
                 ; 0000 003F     delay_ms(5);
                 ; 0000 0040     if (KEYPAD_C1)
0000af 9b84      	SBIS 0x10,4
0000b0 c002      	RJMP _0x13
                 ; 0000 0041         result = KEYPAD_NUM7;
0000b1 e017      	LDI  R17,LOW(7)
                 ; 0000 0042     else if (KEYPAD_C2)
0000b2 c006      	RJMP _0x14
                 _0x13:
0000b3 9b85      	SBIS 0x10,5
0000b4 c002      	RJMP _0x15
                 ; 0000 0043         result = KEYPAD_NUM8;
0000b5 e018      	LDI  R17,LOW(8)
                 ; 0000 0044     else if (KEYPAD_C3)
0000b6 c002      	RJMP _0x16
                 _0x15:
0000b7 9986      	SBIC 0x10,6
                 ; 0000 0045         result = KEYPAD_NUM9;
0000b8 e019      	LDI  R17,LOW(9)
                 ; 0000 0046 
                 ; 0000 0047     ////////////////////////  ROW2 ////////////////////////
                 ; 0000 0048     KEYPAD_R1 = 0;
                 _0x16:
                 _0x14:
0000b9 9890      	CBI  0x12,0
                 ; 0000 0049     KEYPAD_R2 = 1;
0000ba 9a91      	SBI  0x12,1
                 ; 0000 004A     KEYPAD_R3 = 0;
0000bb 940e 0167 	CALL SUBOPT_0x2
                 ; 0000 004B     KEYPAD_R4 = 0;
                 ; 0000 004C 
                 ; 0000 004D     delay_ms(5);
                 ; 0000 004E     if (KEYPAD_C1)
0000bd 9b84      	SBIS 0x10,4
0000be c002      	RJMP _0x20
                 ; 0000 004F         result = KEYPAD_NUM4;
0000bf e014      	LDI  R17,LOW(4)
                 ; 0000 0050     else if (KEYPAD_C2)
0000c0 c006      	RJMP _0x21
                 _0x20:
0000c1 9b85      	SBIS 0x10,5
0000c2 c002      	RJMP _0x22
                 ; 0000 0051         result = KEYPAD_NUM5;
0000c3 e015      	LDI  R17,LOW(5)
                 ; 0000 0052     else if (KEYPAD_C3)
0000c4 c002      	RJMP _0x23
                 _0x22:
0000c5 9986      	SBIC 0x10,6
                 ; 0000 0053         result = KEYPAD_NUM6;
0000c6 e016      	LDI  R17,LOW(6)
                 ; 0000 0054 
                 ; 0000 0055     ////////////////////////  ROW3 ////////////////////////
                 ; 0000 0056     KEYPAD_R1 = 0;
                 _0x23:
                 _0x21:
0000c7 9890      	CBI  0x12,0
                 ; 0000 0057     KEYPAD_R2 = 0;
0000c8 9891      	CBI  0x12,1
                 ; 0000 0058     KEYPAD_R3 = 1;
0000c9 9a92      	SBI  0x12,2
                 ; 0000 0059     KEYPAD_R4 = 0;
0000ca 9893      	CBI  0x12,3
                 ; 0000 005A 
                 ; 0000 005B     delay_ms(5);
0000cb 940e 016d 	CALL SUBOPT_0x3
                 ; 0000 005C     if (KEYPAD_C1)
0000cd 9b84      	SBIS 0x10,4
0000ce c002      	RJMP _0x2D
                 ; 0000 005D         result = KEYPAD_NUM1;
0000cf e011      	LDI  R17,LOW(1)
                 ; 0000 005E     else if (KEYPAD_C2)
0000d0 c006      	RJMP _0x2E
                 _0x2D:
0000d1 9b85      	SBIS 0x10,5
0000d2 c002      	RJMP _0x2F
                 ; 0000 005F         result = KEYPAD_NUM2;
0000d3 e012      	LDI  R17,LOW(2)
                 ; 0000 0060     else if (KEYPAD_C3)
0000d4 c002      	RJMP _0x30
                 _0x2F:
0000d5 9986      	SBIC 0x10,6
                 ; 0000 0061         result = KEYPAD_NUM3;
0000d6 e013      	LDI  R17,LOW(3)
                 ; 0000 0062 
                 ; 0000 0063     ////////////////////////  ROW4 ////////////////////////
                 ; 0000 0064     KEYPAD_R1 = 0;
                 _0x30:
                 _0x2E:
0000d7 9890      	CBI  0x12,0
                 ; 0000 0065     KEYPAD_R2 = 0;
0000d8 9891      	CBI  0x12,1
                 ; 0000 0066     KEYPAD_R3 = 0;
0000d9 9892      	CBI  0x12,2
                 ; 0000 0067     KEYPAD_R4 = 1;
0000da 9a93      	SBI  0x12,3
                 ; 0000 0068 
                 ; 0000 0069     delay_ms(5);
0000db 940e 016d 	CALL SUBOPT_0x3
                 ; 0000 006A     if (KEYPAD_C2)
0000dd 9985      	SBIC 0x10,5
                 ; 0000 006B         result = KEYPAD_NUM0;
0000de e010      	LDI  R17,LOW(0)
                 ; 0000 006C 
                 ; 0000 006D     return result;
0000df 2fe1      	MOV  R30,R17
0000e0 9119      	LD   R17,Y+
0000e1 9508      	RET
                 ; 0000 006E }
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
0000e2 93aa      	ST   -Y,R26
0000e3 b3e5      	IN   R30,0x15
0000e4 70ef      	ANDI R30,LOW(0xF)
0000e5 2fae      	MOV  R26,R30
0000e6 81e8      	LD   R30,Y
0000e7 7fe0      	ANDI R30,LOW(0xF0)
0000e8 2bea      	OR   R30,R26
0000e9 bbe5      	OUT  0x15,R30
                +
0000ea e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0000eb 958a     +DEC R24
0000ec f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0000ed 9aaa      	SBI  0x15,2
                +
0000ee e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ef 958a     +DEC R24
0000f0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f1 98aa      	CBI  0x15,2
                +
0000f2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f3 958a     +DEC R24
0000f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f5 c063      	RJMP _0x20A0001
                 __lcd_write_data:
0000f6 93aa      	ST   -Y,R26
0000f7 81a8      	LD   R26,Y
0000f8 dfe9      	RCALL __lcd_write_nibble_G100
0000f9 81e8          ld    r30,y
0000fa 95e2          swap  r30
0000fb 83e8          st    y,r30
0000fc 81a8      	LD   R26,Y
0000fd dfe4      	RCALL __lcd_write_nibble_G100
                +
0000fe e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000ff 958a     +DEC R24
000100 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000101 c057      	RJMP _0x20A0001
                 _lcd_gotoxy:
000102 93aa      	ST   -Y,R26
000103 81e8      	LD   R30,Y
000104 e0f0      	LDI  R31,0
000105 59e4      	SUBI R30,LOW(-__base_y_G100)
000106 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000107 81e0      	LD   R30,Z
000108 81a9      	LDD  R26,Y+1
000109 0fae      	ADD  R26,R30
00010a dfeb      	RCALL __lcd_write_data
00010b 8079      	LDD  R7,Y+1
00010c 8068      	LDD  R6,Y+0
00010d 9622      	ADIW R28,2
00010e 9508      	RET
                 _lcd_clear:
00010f e0a2      	LDI  R26,LOW(2)
000110 940e 0171 	CALL SUBOPT_0x4
000112 e0ac      	LDI  R26,LOW(12)
000113 dfe2      	RCALL __lcd_write_data
000114 e0a1      	LDI  R26,LOW(1)
000115 940e 0171 	CALL SUBOPT_0x4
000117 e0e0      	LDI  R30,LOW(0)
000118 2e6e      	MOV  R6,R30
000119 2e7e      	MOV  R7,R30
00011a 9508      	RET
                 _lcd_putchar:
00011b 93aa      	ST   -Y,R26
00011c 81a8      	LD   R26,Y
00011d 30aa      	CPI  R26,LOW(0xA)
00011e f011      	BREQ _0x2000005
00011f 1479      	CP   R7,R9
000120 f040      	BRLO _0x2000004
                 _0x2000005:
000121 e0e0      	LDI  R30,LOW(0)
000122 93ea      	ST   -Y,R30
000123 9463      	INC  R6
000124 2da6      	MOV  R26,R6
000125 dfdc      	RCALL _lcd_gotoxy
000126 81a8      	LD   R26,Y
000127 30aa      	CPI  R26,LOW(0xA)
000128 f181      	BREQ _0x20A0001
                 _0x2000004:
000129 9473      	INC  R7
00012a 9aa8      	SBI  0x15,0
00012b 81a8      	LD   R26,Y
00012c dfc9      	RCALL __lcd_write_data
00012d 98a8      	CBI  0x15,0
00012e c02a      	RJMP _0x20A0001
                 _lcd_init:
00012f 93aa      	ST   -Y,R26
000130 b3e4      	IN   R30,0x14
000131 6fe0      	ORI  R30,LOW(0xF0)
000132 bbe4      	OUT  0x14,R30
000133 9aa2      	SBI  0x14,2
000134 9aa0      	SBI  0x14,0
000135 9aa1      	SBI  0x14,1
000136 98aa      	CBI  0x15,2
000137 98a8      	CBI  0x15,0
000138 98a9      	CBI  0x15,1
000139 8098      	LDD  R9,Y+0
00013a 81e8      	LD   R30,Y
00013b 58e0      	SUBI R30,-LOW(128)
                +
00013c 93e0 026e+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00013e 81e8      	LD   R30,Y
00013f 54e0      	SUBI R30,-LOW(192)
                +
000140 93e0 026f+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000142 940e 015b 	CALL SUBOPT_0x0
000144 940e 0177 	CALL SUBOPT_0x5
000146 940e 0177 	CALL SUBOPT_0x5
000148 940e 0177 	CALL SUBOPT_0x5
00014a e2a0      	LDI  R26,LOW(32)
00014b df96      	RCALL __lcd_write_nibble_G100
                +
00014c ec88     +LDI R24 , LOW ( 200 )
00014d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00014e 9701     +SBIW R24 , 1
00014f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000150 e2a8      	LDI  R26,LOW(40)
000151 dfa4      	RCALL __lcd_write_data
000152 e0a4      	LDI  R26,LOW(4)
000153 dfa2      	RCALL __lcd_write_data
000154 e8a5      	LDI  R26,LOW(133)
000155 dfa0      	RCALL __lcd_write_data
000156 e0a6      	LDI  R26,LOW(6)
000157 df9e      	RCALL __lcd_write_data
000158 dfb6      	RCALL _lcd_clear
                 _0x20A0001:
000159 9621      	ADIW R28,1
00015a 9508      	RET
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _number:
000260           	.BYTE 0xC
                 __base_y_G100:
00026c           	.BYTE 0x4
                 __seed_G101:
000270           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00015b e1a4      	LDI  R26,LOW(20)
00015c e0b0      	LDI  R27,0
00015d 940c 017f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
00015f 01f2      	MOVW R30,R4
000160 e6a0      	LDI  R26,LOW(_number)
000161 e0b2      	LDI  R27,HIGH(_number)
000162 940e 0291 	CALL __LSLW2
000164 0fea      	ADD  R30,R26
000165 1ffb      	ADC  R31,R27
000166 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000167 9892      	CBI  0x12,2
000168 9893      	CBI  0x12,3
000169 e0a5      	LDI  R26,LOW(5)
00016a e0b0      	LDI  R27,0
00016b 940c 017f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00016d e0a5      	LDI  R26,LOW(5)
00016e e0b0      	LDI  R27,0
00016f 940c 017f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000171 940e 00f6 	CALL __lcd_write_data
000173 e0a3      	LDI  R26,LOW(3)
000174 e0b0      	LDI  R27,0
000175 940c 017f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000177 e3a0      	LDI  R26,LOW(48)
000178 940e 00e2 	CALL __lcd_write_nibble_G100
                +
00017a ec88     +LDI R24 , LOW ( 200 )
00017b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00017c 9701     +SBIW R24 , 1
00017d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00017e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00017f 9610      	adiw r26,0
000180 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000181 ed80     +LDI R24 , LOW ( 0x7D0 )
000182 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000183 9701     +SBIW R24 , 1
000184 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000185 95a8      	wdr
000186 9711      	sbiw r26,1
000187 f7c9      	brne __delay_ms0
                 __delay_ms1:
000188 9508      	ret
                 
                 __ROUND_REPACK:
000189 2355      	TST  R21
00018a f442      	BRPL __REPACK
00018b 3850      	CPI  R21,0x80
00018c f411      	BRNE __ROUND_REPACK0
00018d ffe0      	SBRS R30,0
00018e c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00018f 9631      	ADIW R30,1
000190 1f69      	ADC  R22,R25
000191 1f79      	ADC  R23,R25
000192 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000193 e850      	LDI  R21,0x80
000194 2757      	EOR  R21,R23
000195 f411      	BRNE __REPACK0
000196 935f      	PUSH R21
000197 c091      	RJMP __ZERORES
                 __REPACK0:
000198 3f5f      	CPI  R21,0xFF
000199 f031      	BREQ __REPACK1
00019a 0f66      	LSL  R22
00019b 0c00      	LSL  R0
00019c 9557      	ROR  R21
00019d 9567      	ROR  R22
00019e 2f75      	MOV  R23,R21
00019f 9508      	RET
                 __REPACK1:
0001a0 935f      	PUSH R21
0001a1 2000      	TST  R0
0001a2 f00a      	BRMI __REPACK2
0001a3 c091      	RJMP __MAXRES
                 __REPACK2:
0001a4 c08a      	RJMP __MINRES
                 
                 __UNPACK:
0001a5 e850      	LDI  R21,0x80
0001a6 2e19      	MOV  R1,R25
0001a7 2215      	AND  R1,R21
0001a8 0f88      	LSL  R24
0001a9 1f99      	ROL  R25
0001aa 2795      	EOR  R25,R21
0001ab 0f55      	LSL  R21
0001ac 9587      	ROR  R24
                 
                 __UNPACK1:
0001ad e850      	LDI  R21,0x80
0001ae 2e07      	MOV  R0,R23
0001af 2205      	AND  R0,R21
0001b0 0f66      	LSL  R22
0001b1 1f77      	ROL  R23
0001b2 2775      	EOR  R23,R21
0001b3 0f55      	LSL  R21
0001b4 9567      	ROR  R22
0001b5 9508      	RET
                 
                 __CDF1U:
0001b6 9468      	SET
0001b7 c001      	RJMP __CDF1U0
                 __CDF1:
0001b8 94e8      	CLT
                 __CDF1U0:
0001b9 9730      	SBIW R30,0
0001ba 4060      	SBCI R22,0
0001bb 4070      	SBCI R23,0
0001bc f0b1      	BREQ __CDF10
0001bd 2400      	CLR  R0
0001be f026      	BRTS __CDF11
0001bf 2377      	TST  R23
0001c0 f412      	BRPL __CDF11
0001c1 9400      	COM  R0
0001c2 d0c6      	RCALL __ANEGD1
                 __CDF11:
0001c3 2e17      	MOV  R1,R23
0001c4 e17e      	LDI  R23,30
0001c5 2011      	TST  R1
                 __CDF12:
0001c6 f032      	BRMI __CDF13
0001c7 957a      	DEC  R23
0001c8 0fee      	LSL  R30
0001c9 1fff      	ROL  R31
0001ca 1f66      	ROL  R22
0001cb 1c11      	ROL  R1
0001cc cff9      	RJMP __CDF12
                 __CDF13:
0001cd 2fef      	MOV  R30,R31
0001ce 2ff6      	MOV  R31,R22
0001cf 2d61      	MOV  R22,R1
0001d0 935f      	PUSH R21
0001d1 dfc1      	RCALL __REPACK
0001d2 915f      	POP  R21
                 __CDF10:
0001d3 9508      	RET
                 
                 __SWAPACC:
0001d4 934f      	PUSH R20
0001d5 01af      	MOVW R20,R30
0001d6 01fd      	MOVW R30,R26
0001d7 01da      	MOVW R26,R20
0001d8 01ab      	MOVW R20,R22
0001d9 01bc      	MOVW R22,R24
0001da 01ca      	MOVW R24,R20
0001db 2d40      	MOV  R20,R0
0001dc 2c01      	MOV  R0,R1
0001dd 2e14      	MOV  R1,R20
0001de 914f      	POP  R20
0001df 9508      	RET
                 
                 __UADD12:
0001e0 0fea      	ADD  R30,R26
0001e1 1ffb      	ADC  R31,R27
0001e2 1f68      	ADC  R22,R24
0001e3 9508      	RET
                 
                 __NEGMAN1:
0001e4 95e0      	COM  R30
0001e5 95f0      	COM  R31
0001e6 9560      	COM  R22
0001e7 5fef      	SUBI R30,-1
0001e8 4fff      	SBCI R31,-1
0001e9 4f6f      	SBCI R22,-1
0001ea 9508      	RET
                 
                 __ADDF12:
0001eb 935f      	PUSH R21
0001ec dfb8      	RCALL __UNPACK
0001ed 3890      	CPI  R25,0x80
0001ee f139      	BREQ __ADDF129
                 
                 __ADDF120:
0001ef 3870      	CPI  R23,0x80
0001f0 f121      	BREQ __ADDF128
                 __ADDF121:
0001f1 2f57      	MOV  R21,R23
0001f2 1b59      	SUB  R21,R25
0001f3 f12b      	BRVS __ADDF1211
0001f4 f412      	BRPL __ADDF122
0001f5 dfde      	RCALL __SWAPACC
0001f6 cffa      	RJMP __ADDF121
                 __ADDF122:
0001f7 3158      	CPI  R21,24
0001f8 f018      	BRLO __ADDF123
0001f9 27aa      	CLR  R26
0001fa 27bb      	CLR  R27
0001fb 2788      	CLR  R24
                 __ADDF123:
0001fc 3058      	CPI  R21,8
0001fd f028      	BRLO __ADDF124
0001fe 2fab      	MOV  R26,R27
0001ff 2fb8      	MOV  R27,R24
000200 2788      	CLR  R24
000201 5058      	SUBI R21,8
000202 cff9      	RJMP __ADDF123
                 __ADDF124:
000203 2355      	TST  R21
000204 f029      	BREQ __ADDF126
                 __ADDF125:
000205 9586      	LSR  R24
000206 95b7      	ROR  R27
000207 95a7      	ROR  R26
000208 955a      	DEC  R21
000209 f7d9      	BRNE __ADDF125
                 __ADDF126:
00020a 2d50      	MOV  R21,R0
00020b 2551      	EOR  R21,R1
00020c f072      	BRMI __ADDF127
00020d dfd2      	RCALL __UADD12
00020e f438      	BRCC __ADDF129
00020f 9567      	ROR  R22
000210 95f7      	ROR  R31
000211 95e7      	ROR  R30
000212 9573      	INC  R23
000213 f413      	BRVC __ADDF129
000214 c020      	RJMP __MAXRES
                 __ADDF128:
000215 dfbe      	RCALL __SWAPACC
                 __ADDF129:
000216 df7c      	RCALL __REPACK
000217 915f      	POP  R21
000218 9508      	RET
                 __ADDF1211:
000219 f7d8      	BRCC __ADDF128
00021a cffb      	RJMP __ADDF129
                 __ADDF127:
00021b 1bea      	SUB  R30,R26
00021c 0bfb      	SBC  R31,R27
00021d 0b68      	SBC  R22,R24
00021e f051      	BREQ __ZERORES
00021f f410      	BRCC __ADDF1210
000220 9400      	COM  R0
000221 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000222 2366      	TST  R22
000223 f392      	BRMI __ADDF129
000224 0fee      	LSL  R30
000225 1fff      	ROL  R31
000226 1f66      	ROL  R22
000227 957a      	DEC  R23
000228 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000229 27ee      	CLR  R30
00022a 27ff      	CLR  R31
00022b 2766      	CLR  R22
00022c 2777      	CLR  R23
00022d 915f      	POP  R21
00022e 9508      	RET
                 
                 __MINRES:
00022f efef      	SER  R30
000230 efff      	SER  R31
000231 e76f      	LDI  R22,0x7F
000232 ef7f      	SER  R23
000233 915f      	POP  R21
000234 9508      	RET
                 
                 __MAXRES:
000235 efef      	SER  R30
000236 efff      	SER  R31
000237 e76f      	LDI  R22,0x7F
000238 e77f      	LDI  R23,0x7F
000239 915f      	POP  R21
00023a 9508      	RET
                 
                 __MULF12:
00023b 935f      	PUSH R21
00023c df68      	RCALL __UNPACK
00023d 3870      	CPI  R23,0x80
00023e f351      	BREQ __ZERORES
00023f 3890      	CPI  R25,0x80
000240 f341      	BREQ __ZERORES
000241 2401      	EOR  R0,R1
000242 9408      	SEC
000243 1f79      	ADC  R23,R25
000244 f423      	BRVC __MULF124
000245 f31c      	BRLT __ZERORES
                 __MULF125:
000246 2000      	TST  R0
000247 f33a      	BRMI __MINRES
000248 cfec      	RJMP __MAXRES
                 __MULF124:
000249 920f      	PUSH R0
00024a 931f      	PUSH R17
00024b 932f      	PUSH R18
00024c 933f      	PUSH R19
00024d 934f      	PUSH R20
00024e 2711      	CLR  R17
00024f 2722      	CLR  R18
000250 2799      	CLR  R25
000251 9f68      	MUL  R22,R24
000252 01a0      	MOVW R20,R0
000253 9f8f      	MUL  R24,R31
000254 2d30      	MOV  R19,R0
000255 0d41      	ADD  R20,R1
000256 1f59      	ADC  R21,R25
000257 9f6b      	MUL  R22,R27
000258 0d30      	ADD  R19,R0
000259 1d41      	ADC  R20,R1
00025a 1f59      	ADC  R21,R25
00025b 9f8e      	MUL  R24,R30
00025c d027      	RCALL __MULF126
00025d 9fbf      	MUL  R27,R31
00025e d025      	RCALL __MULF126
00025f 9f6a      	MUL  R22,R26
000260 d023      	RCALL __MULF126
000261 9fbe      	MUL  R27,R30
000262 d01d      	RCALL __MULF127
000263 9faf      	MUL  R26,R31
000264 d01b      	RCALL __MULF127
000265 9fae      	MUL  R26,R30
000266 0d11      	ADD  R17,R1
000267 1f29      	ADC  R18,R25
000268 1f39      	ADC  R19,R25
000269 1f49      	ADC  R20,R25
00026a 1f59      	ADC  R21,R25
00026b 2fe3      	MOV  R30,R19
00026c 2ff4      	MOV  R31,R20
00026d 2f65      	MOV  R22,R21
00026e 2f52      	MOV  R21,R18
00026f 914f      	POP  R20
000270 913f      	POP  R19
000271 912f      	POP  R18
000272 911f      	POP  R17
000273 900f      	POP  R0
000274 2366      	TST  R22
000275 f02a      	BRMI __MULF122
000276 0f55      	LSL  R21
000277 1fee      	ROL  R30
000278 1fff      	ROL  R31
000279 1f66      	ROL  R22
00027a c002      	RJMP __MULF123
                 __MULF122:
00027b 9573      	INC  R23
00027c f24b      	BRVS __MULF125
                 __MULF123:
00027d df0b      	RCALL __ROUND_REPACK
00027e 915f      	POP  R21
00027f 9508      	RET
                 
                 __MULF127:
000280 0d10      	ADD  R17,R0
000281 1d21      	ADC  R18,R1
000282 1f39      	ADC  R19,R25
000283 c002      	RJMP __MULF128
                 __MULF126:
000284 0d20      	ADD  R18,R0
000285 1d31      	ADC  R19,R1
                 __MULF128:
000286 1f49      	ADC  R20,R25
000287 1f59      	ADC  R21,R25
000288 9508      	RET
                 
                 __ANEGD1:
000289 95f0      	COM  R31
00028a 9560      	COM  R22
00028b 9570      	COM  R23
00028c 95e1      	NEG  R30
00028d 4fff      	SBCI R31,-1
00028e 4f6f      	SBCI R22,-1
00028f 4f7f      	SBCI R23,-1
000290 9508      	RET
                 
                 __LSLW2:
000291 0fee      	LSL  R30
000292 1fff      	ROL  R31
000293 0fee      	LSL  R30
000294 1fff      	ROL  R31
000295 9508      	RET
                 
                 __CWD1:
000296 2f6f      	MOV  R22,R31
000297 0f66      	ADD  R22,R22
000298 0b66      	SBC  R22,R22
000299 2f76      	MOV  R23,R22
00029a 9508      	RET
                 
                 __GETD1P:
00029b 91ed      	LD   R30,X+
00029c 91fd      	LD   R31,X+
00029d 916d      	LD   R22,X+
00029e 917c      	LD   R23,X
00029f 9713      	SBIW R26,3
0002a0 9508      	RET
                 
                 __PUTDP1:
0002a1 93ed      	ST   X+,R30
0002a2 93fd      	ST   X+,R31
0002a3 936d      	ST   X+,R22
0002a4 937c      	ST   X,R23
0002a5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  23 r1 :  16 r2 :   0 r3 :   0 r4 :   1 r5 :   0 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:  23 r18:   7 r19:   8 r20:  16 r21:  42 r22:  40 r23:  26 
r24:  36 r25:  25 r26:  57 r27:  20 r28:   3 r29:   1 r30:  86 r31:  35 
x  :  11 y  :  23 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   9 
adiw  :   4 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   1 brmi  :   6 brne  :  15 brpl  :   3 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   0 call  :  24 
cbi   :  15 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   8 
cp    :   1 cpc   :   0 cpi   :  12 cpse  :   0 dec   :   8 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   4 jmp   :  26 ld    :  16 ldd   :   4 ldi   :  72 
lds   :   0 lpm   :   7 lsl   :  11 lsr   :   1 mov   :  29 movw  :  15 
mul   :   9 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   1 
ori   :   1 out   :  13 pop   :  16 push  :  15 rcall :  32 ret   :  24 
reti  :   0 rjmp  :  31 rol   :  12 ror   :   9 sbc   :   3 sbci  :   8 
sbi   :   9 sbic  :   4 sbis  :   6 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   1 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   5 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  15 std   :   0 sts   :   2 sub   :   2 subi  :   6 swap  :   1 
tst   :   8 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00054c   1320     36   1356   32768   4.1%
[.dseg] 0x000060 0x000274      0     20     20    2143   0.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
