
AVRASM ver. 2.1.30  E:\uni\term7\MicroP\HW6\Q3\Debug\List\program.asm Wed Jan 26 14:06:56 2022

E:\uni\term7\MicroP\HW6\Q3\Debug\List\program.asm(1088): warning: Register r5 already defined by the .DEF directive
E:\uni\term7\MicroP\HW6\Q3\Debug\List\program.asm(1089): warning: Register r4 already defined by the .DEF directive
E:\uni\term7\MicroP\HW6\Q3\Debug\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 7270
00002b 7365
00002c 2073
00002d 2043      	.DB  0x70,0x72,0x65,0x73,0x73,0x20,0x43,0x20
00002e 6f74
00002f 6320
000030 656c
000031 7261      	.DB  0x74,0x6F,0x20,0x63,0x6C,0x65,0x61,0x72
E:\uni\term7\MicroP\HW6\Q3\Debug\List\program.asm(1124): warning: .cseg .db misalignment - padding zero byte
000032 0000      	.DB  0x0
                 _0x2000003:
000033 c080      	.DB  0x80,0xC0
                 _0x2020060:
E:\uni\term7\MicroP\HW6\Q3\Debug\List\program.asm(1128): warning: .cseg .db misalignment - padding zero byte
000034 0001      	.DB  0x1
                 _0x2020000:
000035 4e2d
000036 4e41
000037 4900
000038 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\uni\term7\MicroP\HW6\Q3\Debug\List\program.asm(1131): warning: .cseg .db misalignment - padding zero byte
000039 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003a 0011      	.DW  0x11
00003b 0260      	.DW  _0x52
00003c 0054      	.DW  _0x0*2
                 
00003d 0002      	.DW  0x02
00003e 0271      	.DW  __base_y_G100
00003f 0066      	.DW  _0x2000003*2
                 
000040 0001      	.DW  0x01
000041 0275      	.DW  __seed_G101
000042 0068      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000043 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000044 94f8      	CLI
000045 27ee      	CLR  R30
000046 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bffb      	OUT  GICR,R31
000049 bfeb      	OUT  GICR,R30
00004a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004b e08d      	LDI  R24,(14-2)+1
00004c e0a2      	LDI  R26,2
00004d 27bb      	CLR  R27
                 __CLEAR_REG:
00004e 93ed      	ST   X+,R30
00004f 958a      	DEC  R24
000050 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000051 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000052 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000053 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000054 93ed      	ST   X+,R30
000055 9701      	SBIW R24,1
000056 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000057 e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000058 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000059 9185      	LPM  R24,Z+
00005a 9195      	LPM  R25,Z+
00005b 9700      	SBIW R24,0
00005c f061      	BREQ __GLOBAL_INI_END
00005d 91a5      	LPM  R26,Z+
00005e 91b5      	LPM  R27,Z+
00005f 9005      	LPM  R0,Z+
000060 9015      	LPM  R1,Z+
000061 01bf      	MOVW R22,R30
000062 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000063 9005      	LPM  R0,Z+
000064 920d      	ST   X+,R0
000065 9701      	SBIW R24,1
000066 f7e1      	BRNE __GLOBAL_INI_LOOP
000067 01fb      	MOVW R30,R22
000068 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000069 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006a bfed      	OUT  SPL,R30
00006b e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006e e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006f 940c 00dc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;// Declare your global variables here
                 ;char read_keypad()
                 ; 0000 0009 {
                 
                 	.CSEG
                 _read_keypad:
                 ; .FSTART _read_keypad
                 ; 0000 000A     while(1)
                 _0x3:
                 ; 0000 000B     {
                 ; 0000 000C          PORTD.0=0;
000071 9890      	CBI  0x12,0
                 ; 0000 000D          if(PIND.4==0)
000072 9984      	SBIC 0x10,4
000073 c002      	RJMP _0x8
                 ; 0000 000E          {
                 ; 0000 000F             return '7';
000074 e3e7      	LDI  R30,LOW(55)
000075 9508      	RET
                 ; 0000 0010          }
                 ; 0000 0011          if(PIND.5==0)
                 _0x8:
000076 9985      	SBIC 0x10,5
000077 c002      	RJMP _0x9
                 ; 0000 0012          {
                 ; 0000 0013             return '8';
000078 e3e8      	LDI  R30,LOW(56)
000079 9508      	RET
                 ; 0000 0014          }
                 ; 0000 0015          if(PIND.6==0)
                 _0x9:
00007a 9986      	SBIC 0x10,6
00007b c002      	RJMP _0xA
                 ; 0000 0016          {
                 ; 0000 0017             return '9';
00007c e3e9      	LDI  R30,LOW(57)
00007d 9508      	RET
                 ; 0000 0018          }
                 ; 0000 0019          if(PIND.7==0)
                 _0xA:
00007e 9987      	SBIC 0x10,7
00007f c002      	RJMP _0xB
                 ; 0000 001A          {
                 ; 0000 001B             return '/';
000080 e2ef      	LDI  R30,LOW(47)
000081 9508      	RET
                 ; 0000 001C          }
                 ; 0000 001D          PORTD.0=1;
                 _0xB:
000082 9a90      	SBI  0x12,0
                 ; 0000 001E          delay_ms(50);
000083 940e 02c4 	CALL SUBOPT_0x0
                 ; 0000 001F          //******************************************************************
                 ; 0000 0020          PORTD.1=0;
000085 9891      	CBI  0x12,1
                 ; 0000 0021          if(PIND.4==0)
000086 9984      	SBIC 0x10,4
000087 c002      	RJMP _0x10
                 ; 0000 0022          {
                 ; 0000 0023             return '4';
000088 e3e4      	LDI  R30,LOW(52)
000089 9508      	RET
                 ; 0000 0024          }
                 ; 0000 0025          if(PIND.5==0)
                 _0x10:
00008a 9985      	SBIC 0x10,5
00008b c002      	RJMP _0x11
                 ; 0000 0026          {
                 ; 0000 0027             return '5';
00008c e3e5      	LDI  R30,LOW(53)
00008d 9508      	RET
                 ; 0000 0028          }
                 ; 0000 0029          if(PIND.6==0)
                 _0x11:
00008e 9986      	SBIC 0x10,6
00008f c002      	RJMP _0x12
                 ; 0000 002A          {
                 ; 0000 002B             return '6';
000090 e3e6      	LDI  R30,LOW(54)
000091 9508      	RET
                 ; 0000 002C          }
                 ; 0000 002D          if(PIND.7==0)
                 _0x12:
000092 9987      	SBIC 0x10,7
000093 c002      	RJMP _0x13
                 ; 0000 002E          {
                 ; 0000 002F             return '*';
000094 e2ea      	LDI  R30,LOW(42)
000095 9508      	RET
                 ; 0000 0030          }
                 ; 0000 0031          PORTD.1=1;
                 _0x13:
000096 9a91      	SBI  0x12,1
                 ; 0000 0032          delay_ms(50);
000097 940e 02c4 	CALL SUBOPT_0x0
                 ; 0000 0033          //******************************************************************
                 ; 0000 0034          PORTD.2=0;
000099 9892      	CBI  0x12,2
                 ; 0000 0035          if(PIND.4==0)
00009a 9984      	SBIC 0x10,4
00009b c002      	RJMP _0x18
                 ; 0000 0036          {
                 ; 0000 0037             return '1';
00009c e3e1      	LDI  R30,LOW(49)
00009d 9508      	RET
                 ; 0000 0038          }
                 ; 0000 0039          if(PIND.5==0)
                 _0x18:
00009e 9985      	SBIC 0x10,5
00009f c002      	RJMP _0x19
                 ; 0000 003A          {
                 ; 0000 003B             return '2';
0000a0 e3e2      	LDI  R30,LOW(50)
0000a1 9508      	RET
                 ; 0000 003C          }
                 ; 0000 003D          if(PIND.6==0)
                 _0x19:
0000a2 9986      	SBIC 0x10,6
0000a3 c002      	RJMP _0x1A
                 ; 0000 003E          {
                 ; 0000 003F             return '3';
0000a4 e3e3      	LDI  R30,LOW(51)
0000a5 9508      	RET
                 ; 0000 0040          }
                 ; 0000 0041          if(PIND.7==0)
                 _0x1A:
0000a6 9987      	SBIC 0x10,7
0000a7 c002      	RJMP _0x1B
                 ; 0000 0042          {
                 ; 0000 0043             return '-';
0000a8 e2ed      	LDI  R30,LOW(45)
0000a9 9508      	RET
                 ; 0000 0044          }
                 ; 0000 0045          PORTD.2=1;
                 _0x1B:
0000aa 9a92      	SBI  0x12,2
                 ; 0000 0046          delay_ms(50);
0000ab 940e 02c4 	CALL SUBOPT_0x0
                 ; 0000 0047          //******************************************************************
                 ; 0000 0048          PORTD.3=0;
0000ad 9893      	CBI  0x12,3
                 ; 0000 0049          if(PIND.4==0)
0000ae 9984      	SBIC 0x10,4
0000af c002      	RJMP _0x20
                 ; 0000 004A          {
                 ; 0000 004B             return 'c';
0000b0 e6e3      	LDI  R30,LOW(99)
0000b1 9508      	RET
                 ; 0000 004C          }
                 ; 0000 004D          if(PIND.5==0)
                 _0x20:
0000b2 9985      	SBIC 0x10,5
0000b3 c002      	RJMP _0x21
                 ; 0000 004E          {
                 ; 0000 004F             return '0';
0000b4 e3e0      	LDI  R30,LOW(48)
0000b5 9508      	RET
                 ; 0000 0050          }
                 ; 0000 0051          if(PIND.6==0)
                 _0x21:
0000b6 9986      	SBIC 0x10,6
0000b7 c002      	RJMP _0x22
                 ; 0000 0052          {
                 ; 0000 0053             return '=';
0000b8 e3ed      	LDI  R30,LOW(61)
0000b9 9508      	RET
                 ; 0000 0054          }
                 ; 0000 0055          if(PIND.7==0)
                 _0x22:
0000ba 9987      	SBIC 0x10,7
0000bb c002      	RJMP _0x23
                 ; 0000 0056          {
                 ; 0000 0057             return '+';
0000bc e2eb      	LDI  R30,LOW(43)
0000bd 9508      	RET
                 ; 0000 0058          }
                 ; 0000 0059          PORTD.3=1;
                 _0x23:
0000be 9a93      	SBI  0x12,3
                 ; 0000 005A          delay_ms(50);
0000bf 940e 02c4 	CALL SUBOPT_0x0
                 ; 0000 005B 
                 ; 0000 005C     }
0000c1 cfaf      	RJMP _0x3
                 ; 0000 005D }
                 ; .FEND
                 ;void cleaner(char* sumchar)
                 ; 0000 005F {
                 _cleaner:
                 ; .FSTART _cleaner
                 ; 0000 0060     int i=0;
                 ; 0000 0061     for(i=0;i<4;i++)
0000c2 93ba      	ST   -Y,R27
0000c3 93aa      	ST   -Y,R26
0000c4 931a      	ST   -Y,R17
0000c5 930a      	ST   -Y,R16
                 ;	*sumchar -> Y+2
                 ;	i -> R16,R17
                +
0000c6 e000     +LDI R16 , LOW ( 0 )
0000c7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000c8 e000     +LDI R16 , LOW ( 0 )
0000c9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x27:
                +
0000ca 3004     +CPI R16 , LOW ( 4 )
0000cb e0e0     +LDI R30 , HIGH ( 4 )
0000cc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
0000cd f454      	BRGE _0x28
                 ; 0000 0062     {
                 ; 0000 0063         sumchar[i]='';
0000ce 01f8      	MOVW R30,R16
0000cf 81aa      	LDD  R26,Y+2
0000d0 81bb      	LDD  R27,Y+2+1
0000d1 0fae      	ADD  R26,R30
0000d2 1fbf      	ADC  R27,R31
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 93ec      	ST   X,R30
                 ; 0000 0064     }
                +
0000d5 5f0f     +SUBI R16 , LOW ( - 1 )
0000d6 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000d7 cff2      	RJMP _0x27
                 _0x28:
                 ; 0000 0065 }
0000d8 8119      	LDD  R17,Y+1
0000d9 8108      	LDD  R16,Y+0
0000da 9624      	ADIW R28,4
0000db 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0068 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0069  int number1,number2,sum,step=0;
                 ; 0000 006A  char func,mainfunc,sumchar[4],func2;
                 ; 0000 006B 
                 ; 0000 006C // Input/Output Ports initialization
                 ; 0000 006D // Port A initialization
                 ; 0000 006E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006F DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000dc 9729      	SBIW R28,9
0000dd e0e0      	LDI  R30,LOW(0)
0000de 83ef      	STD  Y+7,R30
0000df 87e8      	STD  Y+8,R30
                 ;	number1 -> R16,R17
                 ;	number2 -> R18,R19
                 ;	sum -> R20,R21
                 ;	step -> Y+7
                 ;	func -> Y+6
                 ;	mainfunc -> Y+5
                 ;	sumchar -> Y+1
                 ;	func2 -> Y+0
0000e0 bbea      	OUT  0x1A,R30
                 ; 0000 0070 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0071 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000e1 bbeb      	OUT  0x1B,R30
                 ; 0000 0072 
                 ; 0000 0073 // Port B initialization
                 ; 0000 0074 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0075 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000e2 bbe7      	OUT  0x17,R30
                 ; 0000 0076 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0077 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000e3 bbe8      	OUT  0x18,R30
                 ; 0000 0078 
                 ; 0000 0079 // Port C initialization
                 ; 0000 007A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007B DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000e4 bbe4      	OUT  0x14,R30
                 ; 0000 007C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000e5 bbe5      	OUT  0x15,R30
                 ; 0000 007E 
                 ; 0000 007F // Port D initialization
                 ; 0000 0080 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0081 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000e6 e0ef      	LDI  R30,LOW(15)
0000e7 bbe1      	OUT  0x11,R30
                 ; 0000 0082 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0083 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
0000e8 efef      	LDI  R30,LOW(255)
0000e9 bbe2      	OUT  0x12,R30
                 ; 0000 0084 
                 ; 0000 0085 // Timer/Counter 0 initialization
                 ; 0000 0086 // Clock source: System Clock
                 ; 0000 0087 // Clock value: Timer 0 Stopped
                 ; 0000 0088 // Mode: Normal top=0xFF
                 ; 0000 0089 // OC0 output: Disconnected
                 ; 0000 008A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000ea e0e0      	LDI  R30,LOW(0)
0000eb bfe3      	OUT  0x33,R30
                 ; 0000 008B TCNT0=0x00;
0000ec bfe2      	OUT  0x32,R30
                 ; 0000 008C OCR0=0x00;
0000ed bfec      	OUT  0x3C,R30
                 ; 0000 008D 
                 ; 0000 008E // Timer/Counter 1 initialization
                 ; 0000 008F // Clock source: System Clock
                 ; 0000 0090 // Clock value: Timer1 Stopped
                 ; 0000 0091 // Mode: Normal top=0xFFFF
                 ; 0000 0092 // OC1A output: Disconnected
                 ; 0000 0093 // OC1B output: Disconnected
                 ; 0000 0094 // Noise Canceler: Off
                 ; 0000 0095 // Input Capture on Falling Edge
                 ; 0000 0096 // Timer1 Overflow Interrupt: Off
                 ; 0000 0097 // Input Capture Interrupt: Off
                 ; 0000 0098 // Compare A Match Interrupt: Off
                 ; 0000 0099 // Compare B Match Interrupt: Off
                 ; 0000 009A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000ee bdef      	OUT  0x2F,R30
                 ; 0000 009B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000ef bdee      	OUT  0x2E,R30
                 ; 0000 009C TCNT1H=0x00;
0000f0 bded      	OUT  0x2D,R30
                 ; 0000 009D TCNT1L=0x00;
0000f1 bdec      	OUT  0x2C,R30
                 ; 0000 009E ICR1H=0x00;
0000f2 bde7      	OUT  0x27,R30
                 ; 0000 009F ICR1L=0x00;
0000f3 bde6      	OUT  0x26,R30
                 ; 0000 00A0 OCR1AH=0x00;
0000f4 bdeb      	OUT  0x2B,R30
                 ; 0000 00A1 OCR1AL=0x00;
0000f5 bdea      	OUT  0x2A,R30
                 ; 0000 00A2 OCR1BH=0x00;
0000f6 bde9      	OUT  0x29,R30
                 ; 0000 00A3 OCR1BL=0x00;
0000f7 bde8      	OUT  0x28,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // Timer/Counter 2 initialization
                 ; 0000 00A6 // Clock source: System Clock
                 ; 0000 00A7 // Clock value: Timer2 Stopped
                 ; 0000 00A8 // Mode: Normal top=0xFF
                 ; 0000 00A9 // OC2 output: Disconnected
                 ; 0000 00AA ASSR=0<<AS2;
0000f8 bde2      	OUT  0x22,R30
                 ; 0000 00AB TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000f9 bde5      	OUT  0x25,R30
                 ; 0000 00AC TCNT2=0x00;
0000fa bde4      	OUT  0x24,R30
                 ; 0000 00AD OCR2=0x00;
0000fb bde3      	OUT  0x23,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00B0 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000fc bfe9      	OUT  0x39,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // External Interrupt(s) initialization
                 ; 0000 00B3 // INT0: Off
                 ; 0000 00B4 // INT1: Off
                 ; 0000 00B5 // INT2: Off
                 ; 0000 00B6 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000fd bfe5      	OUT  0x35,R30
                 ; 0000 00B7 MCUCSR=(0<<ISC2);
0000fe bfe4      	OUT  0x34,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // USART initialization
                 ; 0000 00BA // USART disabled
                 ; 0000 00BB UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000ff b9ea      	OUT  0xA,R30
                 ; 0000 00BC 
                 ; 0000 00BD // Analog Comparator initialization
                 ; 0000 00BE // Analog Comparator: Off
                 ; 0000 00BF // The Analog Comparator's positive input is
                 ; 0000 00C0 // connected to the AIN0 pin
                 ; 0000 00C1 // The Analog Comparator's negative input is
                 ; 0000 00C2 // connected to the AIN1 pin
                 ; 0000 00C3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000100 e8e0      	LDI  R30,LOW(128)
000101 b9e8      	OUT  0x8,R30
                 ; 0000 00C4 SFIOR=(0<<ACME);
000102 e0e0      	LDI  R30,LOW(0)
000103 bfe0      	OUT  0x30,R30
                 ; 0000 00C5 
                 ; 0000 00C6 // ADC initialization
                 ; 0000 00C7 // ADC disabled
                 ; 0000 00C8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000104 b9e6      	OUT  0x6,R30
                 ; 0000 00C9 
                 ; 0000 00CA // SPI initialization
                 ; 0000 00CB // SPI disabled
                 ; 0000 00CC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000105 b9ed      	OUT  0xD,R30
                 ; 0000 00CD 
                 ; 0000 00CE // TWI initialization
                 ; 0000 00CF // TWI disabled
                 ; 0000 00D0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000106 bfe6      	OUT  0x36,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // Alphanumeric LCD initialization
                 ; 0000 00D3 // Connections are specified in the
                 ; 0000 00D4 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00D5 // RS - PORTC Bit 0
                 ; 0000 00D6 // RD - PORTC Bit 1
                 ; 0000 00D7 // EN - PORTC Bit 2
                 ; 0000 00D8 // D4 - PORTC Bit 3
                 ; 0000 00D9 // D5 - PORTC Bit 4
                 ; 0000 00DA // D6 - PORTC Bit 5
                 ; 0000 00DB // D7 - PORTC Bit 6
                 ; 0000 00DC // Characters/line: 8
                 ; 0000 00DD lcd_init(16);
000107 e1a0      	LDI  R26,LOW(16)
000108 d115      	RCALL _lcd_init
                 ; 0000 00DE lcd_clear();
000109 d0e2      	RCALL _lcd_clear
                 ; 0000 00DF while (1)
                 _0x29:
                 ; 0000 00E0       {
                 ; 0000 00E1           PORTD.0=1;
00010a 9a90      	SBI  0x12,0
                 ; 0000 00E2           PORTD.1=1;
00010b 9a91      	SBI  0x12,1
                 ; 0000 00E3           PORTD.2=1;
00010c 9a92      	SBI  0x12,2
                 ; 0000 00E4           PORTD.3=1;
00010d 9a93      	SBI  0x12,3
                 ; 0000 00E5           func=read_keypad();
00010e df62      	RCALL _read_keypad
00010f 83ee      	STD  Y+6,R30
                 ; 0000 00E6           func2=func;
000110 83e8      	ST   Y,R30
                 ; 0000 00E7           switch(step)
000111 81ef      	LDD  R30,Y+7
000112 85f8      	LDD  R31,Y+7+1
                 ; 0000 00E8           {
                 ; 0000 00E9             case 0:
000113 9730      	SBIW R30,0
000114 f4d9      	BRNE _0x37
                 ; 0000 00EA                 if((func>=48 && func<=57))
000115 81ae      	LDD  R26,Y+6
000116 33a0      	CPI  R26,LOW(0x30)
000117 f010      	BRLO _0x39
000118 33aa      	CPI  R26,LOW(0x3A)
000119 f008      	BRLO _0x3A
                 _0x39:
00011a c00c      	RJMP _0x38
                 _0x3A:
                 ; 0000 00EB                 {
                 ; 0000 00EC                     number1=atoi(&func2);
00011b 01de      	MOVW R26,R28
00011c 940e 024b 	CALL _atoi
00011e 018f      	MOVW R16,R30
                 ; 0000 00ED                     lcd_gotoxy(0,0);
00011f e0e0      	LDI  R30,LOW(0)
000120 940e 02c8 	CALL SUBOPT_0x1
                 ; 0000 00EE                     lcd_puts(&func2);
000122 01de      	MOVW R26,R28
000123 d0e9      	RCALL _lcd_puts
                 ; 0000 00EF                     step++;
000124 940e 02cc 	CALL SUBOPT_0x2
                 ; 0000 00F0                 }
                 ; 0000 00F1                 else if(func=='c')
000126 c008      	RJMP _0x3B
                 _0x38:
000127 81ae      	LDD  R26,Y+6
000128 36a3      	CPI  R26,LOW(0x63)
000129 f419      	BRNE _0x3C
                 ; 0000 00F2                 {
                 ; 0000 00F3                     step=0;
00012a 940e 02d2 	CALL SUBOPT_0x3
                 ; 0000 00F4                     number1=0;
                 ; 0000 00F5                     number2=0;
                 ; 0000 00F6                     sum=0;
                 ; 0000 00F7                     cleaner(sumchar);
                 ; 0000 00F8                     lcd_clear();
                 ; 0000 00F9                 }
                 ; 0000 00FA                 else
00012c c002      	RJMP _0x3D
                 _0x3C:
                 ; 0000 00FB                 {
                 ; 0000 00FC                     delay_ms(1);
00012d 940e 02e1 	CALL SUBOPT_0x4
                 ; 0000 00FD                 }
                 _0x3D:
                 _0x3B:
                 ; 0000 00FE             break;
00012f c08d      	RJMP _0x36
                 ; 0000 00FF             case 1:
                 _0x37:
000130 30e1      	CPI  R30,LOW(0x1)
000131 e0a0      	LDI  R26,HIGH(0x1)
000132 07fa      	CPC  R31,R26
000133 f4e1      	BRNE _0x3E
                 ; 0000 0100                 if((func=='+')||(func=='-')||(func=='/')||(func=='*'))
000134 81ae      	LDD  R26,Y+6
000135 32ab      	CPI  R26,LOW(0x2B)
000136 f031      	BREQ _0x40
000137 32ad      	CPI  R26,LOW(0x2D)
000138 f021      	BREQ _0x40
000139 32af      	CPI  R26,LOW(0x2F)
00013a f011      	BREQ _0x40
00013b 32aa      	CPI  R26,LOW(0x2A)
00013c f451      	BRNE _0x3F
                 _0x40:
                 ; 0000 0101                 {
                 ; 0000 0102                     mainfunc=func;
00013d 81ee      	LDD  R30,Y+6
00013e 83ed      	STD  Y+5,R30
                 ; 0000 0103                     lcd_gotoxy(1,0);
00013f e0e1      	LDI  R30,LOW(1)
000140 940e 02c8 	CALL SUBOPT_0x1
                 ; 0000 0104                     lcd_putchar(func);
000142 81ae      	LDD  R26,Y+6
000143 d0b4      	RCALL _lcd_putchar
                 ; 0000 0105                     step++;
000144 940e 02cc 	CALL SUBOPT_0x2
                 ; 0000 0106                 }
                 ; 0000 0107                 else if(func=='c')
000146 c008      	RJMP _0x42
                 _0x3F:
000147 81ae      	LDD  R26,Y+6
000148 36a3      	CPI  R26,LOW(0x63)
000149 f419      	BRNE _0x43
                 ; 0000 0108                 {
                 ; 0000 0109                     step=0;
00014a 940e 02d2 	CALL SUBOPT_0x3
                 ; 0000 010A                     number1=0;
                 ; 0000 010B                     number2=0;
                 ; 0000 010C                     sum=0;
                 ; 0000 010D                     cleaner(sumchar);
                 ; 0000 010E                     lcd_clear();
                 ; 0000 010F                 }
                 ; 0000 0110                 else
00014c c002      	RJMP _0x44
                 _0x43:
                 ; 0000 0111                 {
                 ; 0000 0112                     delay_ms(1);
00014d 940e 02e1 	CALL SUBOPT_0x4
                 ; 0000 0113                 }
                 _0x44:
                 _0x42:
                 ; 0000 0114             break;
00014f c06d      	RJMP _0x36
                 ; 0000 0115             case 2:
                 _0x3E:
000150 30e2      	CPI  R30,LOW(0x2)
000151 e0a0      	LDI  R26,HIGH(0x2)
000152 07fa      	CPC  R31,R26
000153 f009      	BREQ PC+2
000154 c060      	RJMP _0x56
                 ; 0000 0116                 if((func>=48 && func<=57))
000155 81ae      	LDD  R26,Y+6
000156 33a0      	CPI  R26,LOW(0x30)
000157 f010      	BRLO _0x47
000158 33aa      	CPI  R26,LOW(0x3A)
000159 f008      	BRLO _0x48
                 _0x47:
00015a c051      	RJMP _0x46
                 _0x48:
                 ; 0000 0117                 {
                 ; 0000 0118                     number2=atoi(&func2);
00015b 01de      	MOVW R26,R28
00015c 940e 024b 	CALL _atoi
00015e 019f      	MOVW R18,R30
                 ; 0000 0119                     lcd_gotoxy(2,0);
00015f e0e2      	LDI  R30,LOW(2)
000160 940e 02c8 	CALL SUBOPT_0x1
                 ; 0000 011A                     lcd_putchar(func);
000162 81ae      	LDD  R26,Y+6
000163 d094      	RCALL _lcd_putchar
                 ; 0000 011B                     step++;
000164 940e 02cc 	CALL SUBOPT_0x2
                 ; 0000 011C                     switch(mainfunc)
000166 81ed      	LDD  R30,Y+5
000167 e0f0      	LDI  R31,0
                 ; 0000 011D                     {
                 ; 0000 011E                         case '+':
000168 32eb      	CPI  R30,LOW(0x2B)
000169 e0a0      	LDI  R26,HIGH(0x2B)
00016a 07fa      	CPC  R31,R26
00016b f429      	BRNE _0x4C
                 ; 0000 011F                             sum=number1+number2;
00016c 01f9      	MOVW R30,R18
00016d 0fe0      	ADD  R30,R16
00016e 1ff1      	ADC  R31,R17
00016f 01af      	MOVW R20,R30
                 ; 0000 0120                         break;
000170 c022      	RJMP _0x4B
                 ; 0000 0121                         case '-':
                 _0x4C:
000171 32ed      	CPI  R30,LOW(0x2D)
000172 e0a0      	LDI  R26,HIGH(0x2D)
000173 07fa      	CPC  R31,R26
000174 f429      	BRNE _0x4D
                 ; 0000 0122                             sum=number1-number2;
000175 01f8      	MOVW R30,R16
000176 1be2      	SUB  R30,R18
000177 0bf3      	SBC  R31,R19
000178 01af      	MOVW R20,R30
                 ; 0000 0123                         break;
000179 c019      	RJMP _0x4B
                 ; 0000 0124                         case '*':
                 _0x4D:
00017a 32ea      	CPI  R30,LOW(0x2A)
00017b e0a0      	LDI  R26,HIGH(0x2A)
00017c 07fa      	CPC  R31,R26
00017d f431      	BRNE _0x4E
                 ; 0000 0125                             sum=number1*number2;
00017e 01f9      	MOVW R30,R18
00017f 01d8      	MOVW R26,R16
000180 940e 0308 	CALL __MULW12
000182 01af      	MOVW R20,R30
                 ; 0000 0126                         break;
000183 c00f      	RJMP _0x4B
                 ; 0000 0127                         case '/':
                 _0x4E:
000184 32ef      	CPI  R30,LOW(0x2F)
000185 e0a0      	LDI  R26,HIGH(0x2F)
000186 07fa      	CPC  R31,R26
000187 f459      	BRNE _0x4B
                 ; 0000 0128                             if(number2!=0)
000188 2e02      	MOV  R0,R18
000189 2a03      	OR   R0,R19
00018a f031      	BREQ _0x50
                 ; 0000 0129                                 sum=number1/number2;
00018b 01f9      	MOVW R30,R18
00018c 01d8      	MOVW R26,R16
00018d 940e 0320 	CALL __DIVW21
00018f 01af      	MOVW R20,R30
                 ; 0000 012A                             else
000190 c002      	RJMP _0x51
                 _0x50:
                 ; 0000 012B                                 sum=0;
                +
000191 e040     +LDI R20 , LOW ( 0 )
000192 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 012C                         break;
                 _0x51:
                 ; 0000 012D                     }
                 _0x4B:
                 ; 0000 012E                     lcd_gotoxy(3,0);
000193 e0e3      	LDI  R30,LOW(3)
000194 940e 02c8 	CALL SUBOPT_0x1
                 ; 0000 012F                     lcd_putchar('=');
000196 e3ad      	LDI  R26,LOW(61)
000197 d060      	RCALL _lcd_putchar
                 ; 0000 0130                     lcd_gotoxy(4,0);
000198 e0e4      	LDI  R30,LOW(4)
000199 940e 02c8 	CALL SUBOPT_0x1
                 ; 0000 0131                     itoa(sum,sumchar);
00019b 935a      	ST   -Y,R21
00019c 934a      	ST   -Y,R20
00019d 01de      	MOVW R26,R28
00019e 9613      	ADIW R26,3
00019f 940e 0282 	CALL _itoa
                 ; 0000 0132                     lcd_puts(sumchar);
0001a1 01de      	MOVW R26,R28
0001a2 9611      	ADIW R26,1
0001a3 d069      	RCALL _lcd_puts
                 ; 0000 0133                     lcd_gotoxy(0,1);
0001a4 e0e0      	LDI  R30,LOW(0)
0001a5 93ea      	ST   -Y,R30
0001a6 e0a1      	LDI  R26,LOW(1)
0001a7 d037      	RCALL _lcd_gotoxy
                 ; 0000 0134                     lcd_puts("press C to clear");
                +
0001a8 e6a0     +LDI R26 , LOW ( _0x52 + ( 0 ) )
0001a9 e0b2     +LDI R27 , HIGH ( _0x52 + ( 0 ) )
                 	__POINTW2MN _0x52,0
0001aa d062      	RCALL _lcd_puts
                 ; 0000 0135                 }
                 ; 0000 0136                 else if(func=='c')
0001ab c008      	RJMP _0x53
                 _0x46:
0001ac 81ae      	LDD  R26,Y+6
0001ad 36a3      	CPI  R26,LOW(0x63)
0001ae f419      	BRNE _0x54
                 ; 0000 0137                 {
                 ; 0000 0138                     step=0;
0001af 940e 02d2 	CALL SUBOPT_0x3
                 ; 0000 0139                     number1=0;
                 ; 0000 013A                     number2=0;
                 ; 0000 013B                     sum=0;
                 ; 0000 013C                     cleaner(sumchar);
                 ; 0000 013D                     lcd_clear();
                 ; 0000 013E                 }
                 ; 0000 013F                 else
0001b1 c002      	RJMP _0x55
                 _0x54:
                 ; 0000 0140                 {
                 ; 0000 0141                     delay_ms(1);
0001b2 940e 02e1 	CALL SUBOPT_0x4
                 ; 0000 0142                 }
                 _0x55:
                 _0x53:
                 ; 0000 0143             break;
0001b4 c008      	RJMP _0x36
                 ; 0000 0144             default :
                 _0x56:
                 ; 0000 0145                 if(func=='c')
0001b5 81ae      	LDD  R26,Y+6
0001b6 36a3      	CPI  R26,LOW(0x63)
0001b7 f419      	BRNE _0x57
                 ; 0000 0146                 {
                 ; 0000 0147                     step=0;
0001b8 940e 02d2 	CALL SUBOPT_0x3
                 ; 0000 0148                     number1=0;
                 ; 0000 0149                     number2=0;
                 ; 0000 014A                     sum=0;
                 ; 0000 014B                     cleaner(sumchar);
                 ; 0000 014C                     lcd_clear();
                 ; 0000 014D                 }
                 ; 0000 014E                 else
0001ba c002      	RJMP _0x58
                 _0x57:
                 ; 0000 014F                 {
                 ; 0000 0150                     delay_ms(1);
0001bb 940e 02e1 	CALL SUBOPT_0x4
                 ; 0000 0151                 }
                 _0x58:
                 ; 0000 0152             break;
                 ; 0000 0153 
                 ; 0000 0154           }
                 _0x36:
                 ; 0000 0155 
                 ; 0000 0156       }
0001bd cf4c      	RJMP _0x29
                 ; 0000 0157 }
                 _0x59:
0001be cfff      	RJMP _0x59
                 ; .FEND
                 
                 	.DSEG
                 _0x52:
000260           	.BYTE 0x11
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001bf 93aa      	ST   -Y,R26
0001c0 b3e5      	IN   R30,0x15
0001c1 70ef      	ANDI R30,LOW(0xF)
0001c2 2fae      	MOV  R26,R30
0001c3 81e8      	LD   R30,Y
0001c4 7fe0      	ANDI R30,LOW(0xF0)
0001c5 2bea      	OR   R30,R26
0001c6 bbe5      	OUT  0x15,R30
                +
0001c7 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0001c8 958a     +DEC R24
0001c9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0001ca 9aaa      	SBI  0x15,2
                +
0001cb e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0001cc 958a     +DEC R24
0001cd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0001ce 98aa      	CBI  0x15,2
                +
0001cf e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0001d0 958a     +DEC R24
0001d1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0001d2 c076      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001d3 93aa      	ST   -Y,R26
0001d4 81a8      	LD   R26,Y
0001d5 dfe9      	RCALL __lcd_write_nibble_G100
0001d6 81e8          ld    r30,y
0001d7 95e2          swap  r30
0001d8 83e8          st    y,r30
0001d9 81a8      	LD   R26,Y
0001da dfe4      	RCALL __lcd_write_nibble_G100
                +
0001db e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
0001dc 958a     +DEC R24
0001dd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
0001de c06a      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001df 93aa      	ST   -Y,R26
0001e0 81e8      	LD   R30,Y
0001e1 e0f0      	LDI  R31,0
0001e2 58ef      	SUBI R30,LOW(-__base_y_G100)
0001e3 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001e4 81e0      	LD   R30,Z
0001e5 81a9      	LDD  R26,Y+1
0001e6 0fae      	ADD  R26,R30
0001e7 dfeb      	RCALL __lcd_write_data
0001e8 8059      	LDD  R5,Y+1
0001e9 8048      	LDD  R4,Y+0
0001ea 9622      	ADIW R28,2
0001eb 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001ec e0a2      	LDI  R26,LOW(2)
0001ed 940e 02e5 	CALL SUBOPT_0x5
0001ef e0ac      	LDI  R26,LOW(12)
0001f0 dfe2      	RCALL __lcd_write_data
0001f1 e0a1      	LDI  R26,LOW(1)
0001f2 940e 02e5 	CALL SUBOPT_0x5
0001f4 e0e0      	LDI  R30,LOW(0)
0001f5 2e4e      	MOV  R4,R30
0001f6 2e5e      	MOV  R5,R30
0001f7 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001f8 93aa      	ST   -Y,R26
0001f9 81a8      	LD   R26,Y
0001fa 30aa      	CPI  R26,LOW(0xA)
0001fb f011      	BREQ _0x2000005
0001fc 1457      	CP   R5,R7
0001fd f048      	BRLO _0x2000004
                 _0x2000005:
0001fe e0e0      	LDI  R30,LOW(0)
0001ff 93ea      	ST   -Y,R30
000200 9443      	INC  R4
000201 2da4      	MOV  R26,R4
000202 dfdc      	RCALL _lcd_gotoxy
000203 81a8      	LD   R26,Y
000204 30aa      	CPI  R26,LOW(0xA)
000205 f409      	BRNE _0x2000007
000206 c042      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
000207 9453      	INC  R5
000208 9aa8      	SBI  0x15,0
000209 81a8      	LD   R26,Y
00020a dfc8      	RCALL __lcd_write_data
00020b 98a8      	CBI  0x15,0
00020c c03c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00020d 93ba      	ST   -Y,R27
00020e 93aa      	ST   -Y,R26
00020f 931a      	ST   -Y,R17
                 _0x2000008:
000210 81a9      	LDD  R26,Y+1
000211 81ba      	LDD  R27,Y+1+1
000212 91ed      	LD   R30,X+
000213 83a9      	STD  Y+1,R26
000214 83ba      	STD  Y+1+1,R27
000215 2f1e      	MOV  R17,R30
000216 30e0      	CPI  R30,0
000217 f019      	BREQ _0x200000A
000218 2fa1      	MOV  R26,R17
000219 dfde      	RCALL _lcd_putchar
00021a cff5      	RJMP _0x2000008
                 _0x200000A:
00021b 8118      	LDD  R17,Y+0
00021c 9623      	ADIW R28,3
00021d 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00021e 93aa      	ST   -Y,R26
00021f b3e4      	IN   R30,0x14
000220 6fe0      	ORI  R30,LOW(0xF0)
000221 bbe4      	OUT  0x14,R30
000222 9aa2      	SBI  0x14,2
000223 9aa0      	SBI  0x14,0
000224 9aa1      	SBI  0x14,1
000225 98aa      	CBI  0x15,2
000226 98a8      	CBI  0x15,0
000227 98a9      	CBI  0x15,1
000228 8078      	LDD  R7,Y+0
000229 81e8      	LD   R30,Y
00022a 58e0      	SUBI R30,-LOW(128)
                +
00022b 93e0 0273+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00022d 81e8      	LD   R30,Y
00022e 54e0      	SUBI R30,-LOW(192)
                +
00022f 93e0 0274+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000231 e1a4      	LDI  R26,LOW(20)
000232 e0b0      	LDI  R27,0
000233 940e 02f2 	CALL _delay_ms
000235 940e 02eb 	CALL SUBOPT_0x6
000237 940e 02eb 	CALL SUBOPT_0x6
000239 940e 02eb 	CALL SUBOPT_0x6
00023b e2a0      	LDI  R26,LOW(32)
00023c df82      	RCALL __lcd_write_nibble_G100
                +
00023d e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00023e 958a     +DEC R24
00023f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000240 e2a8      	LDI  R26,LOW(40)
000241 df91      	RCALL __lcd_write_data
000242 e0a4      	LDI  R26,LOW(4)
000243 df8f      	RCALL __lcd_write_data
000244 e8a5      	LDI  R26,LOW(133)
000245 df8d      	RCALL __lcd_write_data
000246 e0a6      	LDI  R26,LOW(6)
000247 df8b      	RCALL __lcd_write_data
000248 dfa3      	RCALL _lcd_clear
                 _0x20A0001:
000249 9621      	ADIW R28,1
00024a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _atoi:
                 ; .FSTART _atoi
00024b 93ba      	ST   -Y,R27
00024c 93aa      	ST   -Y,R26
00024d 81b9         	ldd  r27,y+1
00024e 81a8         	ld   r26,y
                 __atoi0:
00024f 91ec         	ld   r30,x
000250 2f8a              mov  r24,r26
000251 2fae      	MOV  R26,R30
000252 940e 02b9 	CALL _isspace
000254 2fa8              mov  r26,r24
000255 23ee         	tst  r30
000256 f011         	breq __atoi1
000257 9611         	adiw r26,1
000258 cff6         	rjmp __atoi0
                 __atoi1:
000259 94e8         	clt
00025a 91ec         	ld   r30,x
00025b 32ed         	cpi  r30,'-'
00025c f411         	brne __atoi2
00025d 9468         	set
00025e c002         	rjmp __atoi3
                 __atoi2:
00025f 32eb         	cpi  r30,'+'
000260 f409         	brne __atoi4
                 __atoi3:
000261 9611         	adiw r26,1
                 __atoi4:
000262 2766         	clr  r22
000263 2777         	clr  r23
                 __atoi5:
000264 91ec         	ld   r30,x
000265 2f8a              mov  r24,r26
000266 2fae      	MOV  R26,R30
000267 940e 02b0 	CALL _isdigit
000269 2fa8              mov  r26,r24
00026a 23ee         	tst  r30
00026b f079         	breq __atoi6
00026c 01fb         	movw r30,r22
00026d 0f66         	lsl  r22
00026e 1f77         	rol  r23
00026f 0f66         	lsl  r22
000270 1f77         	rol  r23
000271 0f6e         	add  r22,r30
000272 1f7f         	adc  r23,r31
000273 0f66         	lsl  r22
000274 1f77         	rol  r23
000275 91ed         	ld   r30,x+
000276 27ff         	clr  r31
000277 53e0         	subi r30,'0'
000278 0f6e         	add  r22,r30
000279 1f7f         	adc  r23,r31
00027a cfe9         	rjmp __atoi5
                 __atoi6:
00027b 01fb         	movw r30,r22
00027c f41e         	brtc __atoi7
00027d 95e0         	com  r30
00027e 95f0         	com  r31
00027f 9631         	adiw r30,1
                 __atoi7:
000280 9622         	adiw r28,2
000281 9508         	ret
                 ; .FEND
                 _itoa:
                 ; .FSTART _itoa
000282 93ba      	ST   -Y,R27
000283 93aa      	ST   -Y,R26
000284 91a9          ld   r26,y+
000285 91b9          ld   r27,y+
000286 91e9          ld   r30,y+
000287 91f9          ld   r31,y+
000288 9630          adiw r30,0
000289 f42a          brpl __itoa0
00028a 95e0          com  r30
00028b 95f0          com  r31
00028c 9631          adiw r30,1
00028d e26d          ldi  r22,'-'
00028e 936d          st   x+,r22
                 __itoa0:
00028f 94e8          clt
000290 e180          ldi  r24,low(10000)
000291 e297          ldi  r25,high(10000)
000292 d00d          rcall __itoa1
000293 ee88          ldi  r24,low(1000)
000294 e093          ldi  r25,high(1000)
000295 d00a          rcall __itoa1
000296 e684          ldi  r24,100
000297 2799          clr  r25
000298 d007          rcall __itoa1
000299 e08a          ldi  r24,10
00029a d005          rcall __itoa1
00029b 2f6e          mov  r22,r30
00029c d010          rcall __itoa5
00029d 2766          clr  r22
00029e 936c          st   x,r22
00029f 9508          ret
                 
                 __itoa1:
0002a0 2766          clr	 r22
                 __itoa2:
0002a1 17e8          cp   r30,r24
0002a2 07f9          cpc  r31,r25
0002a3 f020          brlo __itoa3
0002a4 9563          inc  r22
0002a5 1be8          sub  r30,r24
0002a6 0bf9          sbc  r31,r25
0002a7 f7c9          brne __itoa2
                 __itoa3:
0002a8 2366          tst  r22
0002a9 f411          brne __itoa4
0002aa f016          brts __itoa5
0002ab 9508          ret
                 __itoa4:
0002ac 9468          set
                 __itoa5:
0002ad 5d60          subi r22,-0x30
0002ae 936d          st   x+,r22
0002af 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _isdigit:
                 ; .FSTART _isdigit
0002b0 93aa      	ST   -Y,R26
0002b1 e0e1          ldi  r30,1
0002b2 91f9          ld   r31,y+
0002b3 33f0          cpi  r31,'0'
0002b4 f010          brlo isdigit0
0002b5 33fa          cpi  r31,'9'+1
0002b6 f008          brlo isdigit1
                 isdigit0:
0002b7 27ee          clr  r30
                 isdigit1:
0002b8 9508          ret
                 ; .FEND
                 _isspace:
                 ; .FSTART _isspace
0002b9 93aa      	ST   -Y,R26
0002ba e0e1          ldi  r30,1
0002bb 91f9          ld   r31,y+
0002bc 32f0          cpi  r31,' '
0002bd f029          breq isspace1
0002be 30f9          cpi  r31,9
0002bf f010          brlo isspace0
0002c0 30fe          cpi  r31,13+1
0002c1 f008          brlo isspace1
                 isspace0:
0002c2 27ee          clr  r30
                 isspace1:
0002c3 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000271           	.BYTE 0x4
                 __seed_G101:
000275           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0002c4 e3a2      	LDI  R26,LOW(50)
0002c5 e0b0      	LDI  R27,0
0002c6 940c 02f2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0002c8 93ea      	ST   -Y,R30
0002c9 e0a0      	LDI  R26,LOW(0)
0002ca 940c 01df 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0002cc 81ef      	LDD  R30,Y+7
0002cd 85f8      	LDD  R31,Y+7+1
0002ce 9631      	ADIW R30,1
0002cf 83ef      	STD  Y+7,R30
0002d0 87f8      	STD  Y+7+1,R31
0002d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:36 WORDS
                 SUBOPT_0x3:
0002d2 e0e0      	LDI  R30,LOW(0)
0002d3 83ef      	STD  Y+7,R30
0002d4 87e8      	STD  Y+7+1,R30
                +
0002d5 e000     +LDI R16 , LOW ( 0 )
0002d6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0002d7 e020     +LDI R18 , LOW ( 0 )
0002d8 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0002d9 e040     +LDI R20 , LOW ( 0 )
0002da e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0002db 01de      	MOVW R26,R28
0002dc 9611      	ADIW R26,1
0002dd 940e 00c2 	CALL _cleaner
0002df 940c 01ec 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0002e1 e0a1      	LDI  R26,LOW(1)
0002e2 e0b0      	LDI  R27,0
0002e3 940c 02f2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002e5 940e 01d3 	CALL __lcd_write_data
0002e7 e0a3      	LDI  R26,LOW(3)
0002e8 e0b0      	LDI  R27,0
0002e9 940c 02f2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
0002eb e3a0      	LDI  R26,LOW(48)
0002ec 940e 01bf 	CALL __lcd_write_nibble_G100
                +
0002ee e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002ef 958a     +DEC R24
0002f0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002f1 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002f2 9610      	adiw r26,0
0002f3 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002f4 ee88     +LDI R24 , LOW ( 0x3E8 )
0002f5 e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
0002f6 9701     +SBIW R24 , 1
0002f7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
0002f8 95a8      	wdr
0002f9 9711      	sbiw r26,1
0002fa f7c9      	brne __delay_ms0
                 __delay_ms1:
0002fb 9508      	ret
                 
                 __ANEGW1:
0002fc 95f1      	NEG  R31
0002fd 95e1      	NEG  R30
0002fe 40f0      	SBCI R31,0
0002ff 9508      	RET
                 
                 __MULW12U:
000300 9ffa      	MUL  R31,R26
000301 2df0      	MOV  R31,R0
000302 9feb      	MUL  R30,R27
000303 0df0      	ADD  R31,R0
000304 9fea      	MUL  R30,R26
000305 2de0      	MOV  R30,R0
000306 0df1      	ADD  R31,R1
000307 9508      	RET
                 
                 __MULW12:
000308 d01c      	RCALL __CHKSIGNW
000309 dff6      	RCALL __MULW12U
00030a f40e      	BRTC __MULW121
00030b dff0      	RCALL __ANEGW1
                 __MULW121:
00030c 9508      	RET
                 
                 __DIVW21U:
00030d 2400      	CLR  R0
00030e 2411      	CLR  R1
00030f e190      	LDI  R25,16
                 __DIVW21U1:
000310 0faa      	LSL  R26
000311 1fbb      	ROL  R27
000312 1c00      	ROL  R0
000313 1c11      	ROL  R1
000314 1a0e      	SUB  R0,R30
000315 0a1f      	SBC  R1,R31
000316 f418      	BRCC __DIVW21U2
000317 0e0e      	ADD  R0,R30
000318 1e1f      	ADC  R1,R31
000319 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00031a 60a1      	SBR  R26,1
                 __DIVW21U3:
00031b 959a      	DEC  R25
00031c f799      	BRNE __DIVW21U1
00031d 01fd      	MOVW R30,R26
00031e 01d0      	MOVW R26,R0
00031f 9508      	RET
                 
                 __DIVW21:
000320 d004      	RCALL __CHKSIGNW
000321 dfeb      	RCALL __DIVW21U
000322 f40e      	BRTC __DIVW211
000323 dfd8      	RCALL __ANEGW1
                 __DIVW211:
000324 9508      	RET
                 
                 __CHKSIGNW:
000325 94e8      	CLT
000326 fff7      	SBRS R31,7
000327 c002      	RJMP __CHKSW1
000328 dfd3      	RCALL __ANEGW1
000329 9468      	SET
                 __CHKSW1:
00032a ffb7      	SBRS R27,7
00032b c006      	RJMP __CHKSW2
00032c 95a0      	COM  R26
00032d 95b0      	COM  R27
00032e 9611      	ADIW R26,1
00032f f800      	BLD  R0,0
000330 9403      	INC  R0
000331 fa00      	BST  R0,0
                 __CHKSW2:
000332 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  17 r1 :   6 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  13 r17:  12 r18:   7 r19:   3 r20:   7 r21:   3 r22:  20 r23:   6 
r24:  31 r25:  10 r26: 113 r27:  21 r28:  13 r29:   1 r30: 183 r31:  42 
x  :  12 y  :  79 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   8 
adiw  :  16 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  12 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   0 brmi  :   0 brne  :  28 brpl  :   1 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  36 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 
cp    :   2 cpc   :   8 cpi   :  29 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   4 jmp   :  27 ld    :  23 ldd   :  27 ldi   : 106 
lds   :   0 lpm   :   7 lsl   :   4 lsr   :   0 mov   :  16 movw  :  26 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   1 out   :  42 pop   :   0 push  :   0 rcall :  35 ret   :  36 
reti  :   0 rjmp  :  49 rol   :   6 ror   :   0 sbc   :   3 sbci  :   3 
sbi   :  13 sbic  :  16 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  32 std   :  10 sts   :   2 sub   :   3 subi  :   6 swap  :   1 
tst   :   3 wdr   :   1 
Instructions used: 59 out of 116 (50.9%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000666   1586     52   1638   32768   5.0%
[.dseg] 0x000060 0x000279      0     25     25    2048   1.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
