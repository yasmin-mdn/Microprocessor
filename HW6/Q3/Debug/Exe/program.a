;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;#include <stdlib.h>
;// Declare your global variables here
;char read_keypad()
; 0000 0009 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000A     while(1)
;PCODE: $0000000F VOL: 0
; 0000 000B     {
; 0000 000C          PORTD.0=0;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000D          if(PIND.4==0)
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 000E          {
; 0000 000F             return '7';
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0010          }
; 0000 0011          if(PIND.5==0)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0012          {
; 0000 0013             return '8';
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0014          }
; 0000 0015          if(PIND.6==0)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0016          {
; 0000 0017             return '9';
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0018          }
; 0000 0019          if(PIND.7==0)
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001A          {
; 0000 001B             return '/';
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 001C          }
; 0000 001D          PORTD.0=1;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001E          delay_ms(50);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001F          //******************************************************************
; 0000 0020          PORTD.1=0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0021          if(PIND.4==0)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0022          {
; 0000 0023             return '4';
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0024          }
; 0000 0025          if(PIND.5==0)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0026          {
; 0000 0027             return '5';
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0028          }
; 0000 0029          if(PIND.6==0)
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 002A          {
; 0000 002B             return '6';
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 002C          }
; 0000 002D          if(PIND.7==0)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 002E          {
; 0000 002F             return '*';
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0030          }
; 0000 0031          PORTD.1=1;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0032          delay_ms(50);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0033          //******************************************************************
; 0000 0034          PORTD.2=0;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0035          if(PIND.4==0)
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0036          {
; 0000 0037             return '1';
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0038          }
; 0000 0039          if(PIND.5==0)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 003A          {
; 0000 003B             return '2';
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 003C          }
; 0000 003D          if(PIND.6==0)
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 003E          {
; 0000 003F             return '3';
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0040          }
; 0000 0041          if(PIND.7==0)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0042          {
; 0000 0043             return '-';
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0044          }
; 0000 0045          PORTD.2=1;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0046          delay_ms(50);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0047          //******************************************************************
; 0000 0048          PORTD.3=0;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0049          if(PIND.4==0)
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 004A          {
; 0000 004B             return 'c';
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 004C          }
; 0000 004D          if(PIND.5==0)
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 004E          {
; 0000 004F             return '0';
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0050          }
; 0000 0051          if(PIND.6==0)
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0052          {
; 0000 0053             return '=';
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0054          }
; 0000 0055          if(PIND.7==0)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0056          {
; 0000 0057             return '+';
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0058          }
; 0000 0059          PORTD.3=1;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 005A          delay_ms(50);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 005B 
; 0000 005C     }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 005D }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;void cleaner(char* sumchar)
; 0000 005F {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0060     int i=0;
; 0000 0061     for(i=0;i<4;i++)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;	*sumchar -> Y+2
;	i -> R16,R17
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0062     {
; 0000 0063         sumchar[i]='';
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0064     }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0065 }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;
;void main(void)
; 0000 0068 {
;PCODE: $000000B1 VOL: 0
; 0000 0069  int number1,number2,sum,step=0;
; 0000 006A  char func,mainfunc,sumchar[4],func2;
; 0000 006B 
; 0000 006C // Input/Output Ports initialization
; 0000 006D // Port A initialization
; 0000 006E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006F DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;	number1 -> R16,R17
;	number2 -> R18,R19
;	sum -> R20,R21
;	step -> Y+7
;	func -> Y+6
;	mainfunc -> Y+5
;	sumchar -> Y+1
;	func2 -> Y+0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0070 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0071 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0072 
; 0000 0073 // Port B initialization
; 0000 0074 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0075 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0076 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0077 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0078 
; 0000 0079 // Port C initialization
; 0000 007A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007B DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 007C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 007E 
; 0000 007F // Port D initialization
; 0000 0080 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0081 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0082 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0083 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0084 
; 0000 0085 // Timer/Counter 0 initialization
; 0000 0086 // Clock source: System Clock
; 0000 0087 // Clock value: Timer 0 Stopped
; 0000 0088 // Mode: Normal top=0xFF
; 0000 0089 // OC0 output: Disconnected
; 0000 008A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 008B TCNT0=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 008C OCR0=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 008D 
; 0000 008E // Timer/Counter 1 initialization
; 0000 008F // Clock source: System Clock
; 0000 0090 // Clock value: Timer1 Stopped
; 0000 0091 // Mode: Normal top=0xFFFF
; 0000 0092 // OC1A output: Disconnected
; 0000 0093 // OC1B output: Disconnected
; 0000 0094 // Noise Canceler: Off
; 0000 0095 // Input Capture on Falling Edge
; 0000 0096 // Timer1 Overflow Interrupt: Off
; 0000 0097 // Input Capture Interrupt: Off
; 0000 0098 // Compare A Match Interrupt: Off
; 0000 0099 // Compare B Match Interrupt: Off
; 0000 009A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 009B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 009C TCNT1H=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 009D TCNT1L=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 009E ICR1H=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 009F ICR1L=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00A0 OCR1AH=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00A1 OCR1AL=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00A2 OCR1BH=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00A3 OCR1BL=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00A4 
; 0000 00A5 // Timer/Counter 2 initialization
; 0000 00A6 // Clock source: System Clock
; 0000 00A7 // Clock value: Timer2 Stopped
; 0000 00A8 // Mode: Normal top=0xFF
; 0000 00A9 // OC2 output: Disconnected
; 0000 00AA ASSR=0<<AS2;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00AB TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00AC TCNT2=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00AD OCR2=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00AE 
; 0000 00AF // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B0 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00B1 
; 0000 00B2 // External Interrupt(s) initialization
; 0000 00B3 // INT0: Off
; 0000 00B4 // INT1: Off
; 0000 00B5 // INT2: Off
; 0000 00B6 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00B7 MCUCSR=(0<<ISC2);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00B8 
; 0000 00B9 // USART initialization
; 0000 00BA // USART disabled
; 0000 00BB UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00BC 
; 0000 00BD // Analog Comparator initialization
; 0000 00BE // Analog Comparator: Off
; 0000 00BF // The Analog Comparator's positive input is
; 0000 00C0 // connected to the AIN0 pin
; 0000 00C1 // The Analog Comparator's negative input is
; 0000 00C2 // connected to the AIN1 pin
; 0000 00C3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00C4 SFIOR=(0<<ACME);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00C5 
; 0000 00C6 // ADC initialization
; 0000 00C7 // ADC disabled
; 0000 00C8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00C9 
; 0000 00CA // SPI initialization
; 0000 00CB // SPI disabled
; 0000 00CC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00CD 
; 0000 00CE // TWI initialization
; 0000 00CF // TWI disabled
; 0000 00D0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00D1 
; 0000 00D2 // Alphanumeric LCD initialization
; 0000 00D3 // Connections are specified in the
; 0000 00D4 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00D5 // RS - PORTC Bit 0
; 0000 00D6 // RD - PORTC Bit 1
; 0000 00D7 // EN - PORTC Bit 2
; 0000 00D8 // D4 - PORTC Bit 3
; 0000 00D9 // D5 - PORTC Bit 4
; 0000 00DA // D6 - PORTC Bit 5
; 0000 00DB // D7 - PORTC Bit 6
; 0000 00DC // Characters/line: 8
; 0000 00DD lcd_init(16);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00DE lcd_clear();
;PCODE: $000000FD VOL: 0
; 0000 00DF while (1)
;PCODE: $000000FE VOL: 0
; 0000 00E0       {
; 0000 00E1           PORTD.0=1;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00E2           PORTD.1=1;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00E3           PORTD.2=1;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00E4           PORTD.3=1;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00E5           func=read_keypad();
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00E6           func2=func;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00E7           switch(step)
;PCODE: $0000010B VOL: 0
; 0000 00E8           {
; 0000 00E9             case 0:
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00EA                 if((func>=48 && func<=57))
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00EB                 {
; 0000 00EC                     number1=atoi(&func2);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00ED                     lcd_gotoxy(0,0);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00EE                     lcd_puts(&func2);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00EF                     step++;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00F0                 }
; 0000 00F1                 else if(func=='c')
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00F2                 {
; 0000 00F3                     step=0;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00F4                     number1=0;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00F5                     number2=0;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00F6                     sum=0;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00F7                     cleaner(sumchar);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00F8                     lcd_clear();
;PCODE: $00000133 VOL: 0
; 0000 00F9                 }
; 0000 00FA                 else
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00FB                 {
; 0000 00FC                     delay_ms(1);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00FD                 }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00FE             break;
;PCODE: $0000013B VOL: 0
; 0000 00FF             case 1:
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0100                 if((func=='+')||(func=='-')||(func=='/')||(func=='*'))
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0101                 {
; 0000 0102                     mainfunc=func;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0103                     lcd_gotoxy(1,0);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0104                     lcd_putchar(func);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0105                     step++;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0106                 }
; 0000 0107                 else if(func=='c')
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0108                 {
; 0000 0109                     step=0;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 010A                     number1=0;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 010B                     number2=0;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 010C                     sum=0;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 010D                     cleaner(sumchar);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 010E                     lcd_clear();
;PCODE: $00000167 VOL: 0
; 0000 010F                 }
; 0000 0110                 else
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0111                 {
; 0000 0112                     delay_ms(1);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0113                 }
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0114             break;
;PCODE: $0000016F VOL: 0
; 0000 0115             case 2:
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0116                 if((func>=48 && func<=57))
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0117                 {
; 0000 0118                     number2=atoi(&func2);
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0119                     lcd_gotoxy(2,0);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 011A                     lcd_putchar(func);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 011B                     step++;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 011C                     switch(mainfunc)
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 011D                     {
; 0000 011E                         case '+':
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 011F                             sum=number1+number2;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0120                         break;
;PCODE: $00000190 VOL: 0
; 0000 0121                         case '-':
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0122                             sum=number1-number2;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0123                         break;
;PCODE: $00000197 VOL: 0
; 0000 0124                         case '*':
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0125                             sum=number1*number2;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0126                         break;
;PCODE: $0000019F VOL: 0
; 0000 0127                         case '/':
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0128                             if(number2!=0)
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0129                                 sum=number1/number2;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 012A                             else
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 012B                                 sum=0;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 012C                         break;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 012D                     }
;PCODE: $000001AF VOL: 0
; 0000 012E                     lcd_gotoxy(3,0);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 012F                     lcd_putchar('=');
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0130                     lcd_gotoxy(4,0);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0131                     itoa(sum,sumchar);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0132                     lcd_puts(sumchar);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0133                     lcd_gotoxy(0,1);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0134                     lcd_puts("press C to clear");
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0135                 }
; 0000 0136                 else if(func=='c')
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0137                 {
; 0000 0138                     step=0;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0139                     number1=0;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 013A                     number2=0;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 013B                     sum=0;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 013C                     cleaner(sumchar);
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 013D                     lcd_clear();
;PCODE: $000001D5 VOL: 0
; 0000 013E                 }
; 0000 013F                 else
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0140                 {
; 0000 0141                     delay_ms(1);
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0142                 }
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0143             break;
;PCODE: $000001DD VOL: 0
; 0000 0144             default :
;PCODE: $000001DE VOL: 0
; 0000 0145                 if(func=='c')
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0146                 {
; 0000 0147                     step=0;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0148                     number1=0;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0149                     number2=0;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 014A                     sum=0;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 014B                     cleaner(sumchar);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 014C                     lcd_clear();
;PCODE: $000001EC VOL: 0
; 0000 014D                 }
; 0000 014E                 else
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 014F                 {
; 0000 0150                     delay_ms(1);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0151                 }
;PCODE: $000001F2 VOL: 0
; 0000 0152             break;
;PCODE: $000001F3 VOL: 0
; 0000 0153 
; 0000 0154           }
;PCODE: $000001F4 VOL: 0
; 0000 0155 
; 0000 0156       }
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0157 }
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0

	.DSEG
_0x52:
	.BYTE 0x11
